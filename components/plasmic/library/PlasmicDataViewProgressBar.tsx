// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p1fHvJbiLdgzRrAS359KQb
// Component: Bp6sJsd6cahw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import sty from "./PlasmicDataViewProgressBar.module.css"; // plasmic-import: Bp6sJsd6cahw/css

createPlasmicElementProxy;

export type PlasmicDataViewProgressBar__VariantMembers = {
  status: "success" | "warning" | "error";
};
export type PlasmicDataViewProgressBar__VariantsArgs = {
  status?: SingleChoiceArg<"success" | "warning" | "error">;
};
type VariantPropType = keyof PlasmicDataViewProgressBar__VariantsArgs;
export const PlasmicDataViewProgressBar__VariantProps =
  new Array<VariantPropType>("status");

export type PlasmicDataViewProgressBar__ArgsType = {
  children?: React.ReactNode;
  progress?: number;
  showLabel?: boolean;
  showTitle?: boolean;
  title?: string;
};
type ArgPropType = keyof PlasmicDataViewProgressBar__ArgsType;
export const PlasmicDataViewProgressBar__ArgProps = new Array<ArgPropType>(
  "children",
  "progress",
  "showLabel",
  "showTitle",
  "title"
);

export type PlasmicDataViewProgressBar__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultDataViewProgressBarProps {
  children?: React.ReactNode;
  progress?: number;
  showLabel?: boolean;
  showTitle?: boolean;
  title?: string;
  status?: SingleChoiceArg<"success" | "warning" | "error">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDataViewProgressBar__RenderFunc(props: {
  variants: PlasmicDataViewProgressBar__VariantsArgs;
  args: PlasmicDataViewProgressBar__ArgsType;
  overrides: PlasmicDataViewProgressBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          progress: 100,
          showLabel: true,
          showTitle: true,
          title: "Progress"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "status",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.status
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootstatus_error]: hasVariant($state, "status", "error"),
          [sty.rootstatus_success]: hasVariant($state, "status", "success"),
          [sty.rootstatus_warning]: hasVariant($state, "status", "warning")
        }
      )}
      dir={"rtl"}
    >
      {(() => {
        try {
          return $props.showLabel;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nPdOa)}
        >
          {(() => {
            try {
              return $props.showTitle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Progress:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox___49VaY)}>
            {renderPlasmicSlot({
              defaultContents: (
                <strong
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.strong__xf1A0
                  )}
                >
                  {"Progress"}
                </strong>
              ),
              value: args.children
            })}
          </div>
        </Stack__>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__fS0Kq)}>
        <Embed
          className={classNames("__wab_instance", sty.embedHtml___3PvVp, {
            [sty.embedHtmlstatus_error___3PvVpMdKXq]: hasVariant(
              $state,
              "status",
              "error"
            ),
            [sty.embedHtmlstatus_success___3PvVPorGje]: hasVariant(
              $state,
              "status",
              "success"
            ),
            [sty.embedHtmlstatus_warning___3PvVpDdNq]: hasVariant(
              $state,
              "status",
              "warning"
            )
          })}
          code={
            hasVariant($state, "status", "error")
              ? (() => {
                  try {
                    return `<div class="progress-bar-bg-error" style="width:${$props.progress}%;height:100%"></div>`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '<div style="width:0%;height:100%"></div>';
                    }
                    throw e;
                  }
                })()
              : hasVariant($state, "status", "warning")
              ? (() => {
                  try {
                    return `<div class="progress-bar-bg-warning" style="width:${$props.progress}%;height:100%"></div>`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '<div style="width:0%;height:100%"></div>';
                    }
                    throw e;
                  }
                })()
              : hasVariant($state, "status", "success")
              ? (() => {
                  try {
                    return `<div class="progress-bar-bg-success" style="width:${$props.progress}%;height:100%"></div>`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '<div style="width:0%;height:100%"></div>';
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return `<div class="progress-bar-bg-normal" style="width:${$props.progress}%;height:100%"></div>`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '<div style="width:0%;height:100%"></div>';
                    }
                    throw e;
                  }
                })()
          }
        />

        <Embed
          className={classNames("__wab_instance", sty.embedHtml__hIdol, {
            [sty.embedHtmlstatus_error__hIdolMdKXq]: hasVariant(
              $state,
              "status",
              "error"
            ),
            [sty.embedHtmlstatus_success__hIdolorGje]: hasVariant(
              $state,
              "status",
              "success"
            ),
            [sty.embedHtmlstatus_warning__hIdolDdNq]: hasVariant(
              $state,
              "status",
              "warning"
            )
          })}
          code={(() => {
            try {
              return `<style>
   .progress-bar-bg-normal{
    background-color: var(--plasmic-token-color-component-theme-secondary-theme-main)
   }
   .progress-bar-bg-success{
    background-color: var(--plasmic-token-color-component-status-success-main)
   }
   .progress-bar-bg-warning{
    background-color: var(--plasmic-token-color-component-status-warning-main)
   }
   .progress-bar-bg-error{
    background-color: var(--plasmic-token-color-component-status-error-main)
   }
</style>`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "<style>\n   .progress-bar-bg-normal{\n    background-color: var(--plasmic-token-color-component-theme-secondary-theme-main)\n   }\n   .progress-bar-bg-success{\n    background-color: var(--plasmic-token-color-component-status-success-main)\n   }\n   .progress-bar-bg-warning{\n    background-color: var(--plasmic-token-color-component-status-warning-main)\n   }\n   .progress-bar-bg-error{\n    background-color: var(--plasmic-token-color-component-status-error-main)\n   }\n</style>";
              }
              throw e;
            }
          })()}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataViewProgressBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataViewProgressBar__VariantsArgs;
    args?: PlasmicDataViewProgressBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDataViewProgressBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDataViewProgressBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDataViewProgressBar__ArgProps,
          internalVariantPropNames: PlasmicDataViewProgressBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDataViewProgressBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataViewProgressBar";
  } else {
    func.displayName = `PlasmicDataViewProgressBar.${nodeName}`;
  }
  return func;
}

export const PlasmicDataViewProgressBar = Object.assign(
  // Top-level PlasmicDataViewProgressBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicDataViewProgressBar
    internalVariantProps: PlasmicDataViewProgressBar__VariantProps,
    internalArgProps: PlasmicDataViewProgressBar__ArgProps
  }
);

export default PlasmicDataViewProgressBar;
/* prettier-ignore-end */
