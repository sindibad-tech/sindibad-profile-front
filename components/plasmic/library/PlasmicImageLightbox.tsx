// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p1fHvJbiLdgzRrAS359KQb
// Component: R9Ke9i1r-gBN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonButton from "../../ButtonButton"; // plasmic-import: 99pKO0LKqxZl/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import sty from "./PlasmicImageLightbox.module.css"; // plasmic-import: R9Ke9i1r-gBN/css

createPlasmicElementProxy;

export type PlasmicImageLightbox__VariantMembers = {
  open: "open";
};
export type PlasmicImageLightbox__VariantsArgs = {
  open?: SingleBooleanChoiceArg<"open">;
};
type VariantPropType = keyof PlasmicImageLightbox__VariantsArgs;
export const PlasmicImageLightbox__VariantProps = new Array<VariantPropType>(
  "open"
);

export type PlasmicImageLightbox__ArgsType = {
  thumbnail?: string;
  images?: any;
};
type ArgPropType = keyof PlasmicImageLightbox__ArgsType;
export const PlasmicImageLightbox__ArgProps = new Array<ArgPropType>(
  "thumbnail",
  "images"
);

export type PlasmicImageLightbox__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  buttonButton?: Flex__<typeof ButtonButton>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
};

export interface DefaultImageLightboxProps {
  thumbnail?: string;
  images?: any;
  open?: SingleBooleanChoiceArg<"open">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImageLightbox__RenderFunc(props: {
  variants: PlasmicImageLightbox__VariantsArgs;
  args: PlasmicImageLightbox__ArgsType;
  overrides: PlasmicImageLightbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "open",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.open
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootopen]: hasVariant($state, "open", "open") }
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linkopen]: hasVariant($state, "open", "open")
        })}
        component={Link}
        onClick={async event => {
          const $steps = {};

          $steps["updateOpen"] = true
            ? (() => {
                const actionArgs = { vgroup: "open", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateOpen"] != null &&
            typeof $steps["updateOpen"] === "object" &&
            typeof $steps["updateOpen"].then === "function"
          ) {
            $steps["updateOpen"] = await $steps["updateOpen"];
          }
        }}
        platform={"nextjs"}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__ktEV)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.thumbnail;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </PlasmicLink__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__k0ZdZ, {
          [sty.freeBoxopen__k0ZdZy196S]: hasVariant($state, "open", "open")
        })}
      >
        <ButtonButton
          data-plasmic-name={"buttonButton"}
          data-plasmic-override={overrides.buttonButton}
          className={classNames("__wab_instance", sty.buttonButton)}
          color={"themeSecondary"}
          language={"iconOnly"}
          onClick={async event => {
            const $steps = {};

            $steps["updateOpen"] = true
              ? (() => {
                  const actionArgs = { vgroup: "open", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = $stateGet($state, vgroup);
                    $stateSet($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpen"] != null &&
              typeof $steps["updateOpen"] === "object" &&
              typeof $steps["updateOpen"].then === "function"
            ) {
              $steps["updateOpen"] = await $steps["updateOpen"];
            }
          }}
          startIcon={
            '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--ic" width="100%" height="100%" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M18.3 5.71a.996.996 0 0 0-1.41 0L12 10.59L7.11 5.7A.996.996 0 1 0 5.7 7.11L10.59 12L5.7 16.89a.996.996 0 1 0 1.41 1.41L12 13.41l4.89 4.89a.996.996 0 1 0 1.41-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z"></path></svg>'
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__kSjzz)}>
          {(() => {
            const child$Props = {
              arrows: true,
              beforeChange: generateStateOnChangePropForCodeComponents(
                $state,
                "currentSlide",
                ["sliderCarousel", "currentSlide"],
                SliderWrapper_Helpers
              ),
              centerMode: true,
              centerPadding:
                hasVariant($state, "open", "open") &&
                hasVariant(globalVariants, "screen", "mobileSmall")
                  ? "24px"
                  : hasVariant($state, "open", "open") &&
                    hasVariant(globalVariants, "screen", "mobileBig")
                  ? "48px"
                  : hasVariant($state, "open", "open") &&
                    hasVariant(globalVariants, "screen", "tablet")
                  ? "80px"
                  : "120px",
              className: classNames("__wab_instance", sty.sliderCarousel, {
                [sty.sliderCarouselopen]: hasVariant($state, "open", "open")
              }),
              dots: false,
              initialSlide: generateStateValueProp($state, [
                "sliderCarousel",
                "currentSlide"
              ]),
              pauseOnDotsHover: true,
              pauseOnFocus: true,
              ref: ref => {
                $refs["sliderCarousel"] = ref;
              },
              sliderScopeClassName: sty["sliderCarousel__slider"]
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentSlide",
                  plasmicStateName: "sliderCarousel.currentSlide"
                }
              ],
              [],
              SliderWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <SliderWrapper
                data-plasmic-name={"sliderCarousel"}
                data-plasmic-override={overrides.sliderCarousel}
                {...child$Props}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $props.images;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__cJn9B,
                        {
                          [sty.freeBoxopen__cJn9By196S]: hasVariant(
                            $state,
                            "open",
                            "open"
                          )
                        }
                      )}
                      key={currentIndex}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__twes, {
                          [sty.imgopen__twesY196S]: hasVariant(
                            $state,
                            "open",
                            "open"
                          )
                        })}
                        displayHeight={"100%"}
                        displayMaxHeight={"100%"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        src={(() => {
                          try {
                            return currentItem.url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://static1.plasmic.app/components/react-slick/slide1.png";
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  );
                })}
              </SliderWrapper>
            );
          })()}
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "buttonButton", "sliderCarousel"],
  link: ["link"],
  buttonButton: ["buttonButton"],
  sliderCarousel: ["sliderCarousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  buttonButton: typeof ButtonButton;
  sliderCarousel: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImageLightbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImageLightbox__VariantsArgs;
    args?: PlasmicImageLightbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImageLightbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicImageLightbox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImageLightbox__ArgProps,
          internalVariantPropNames: PlasmicImageLightbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImageLightbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImageLightbox";
  } else {
    func.displayName = `PlasmicImageLightbox.${nodeName}`;
  }
  return func;
}

export const PlasmicImageLightbox = Object.assign(
  // Top-level PlasmicImageLightbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    buttonButton: makeNodeComponent("buttonButton"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),

    // Metadata about props expected for PlasmicImageLightbox
    internalVariantProps: PlasmicImageLightbox__VariantProps,
    internalArgProps: PlasmicImageLightbox__ArgProps
  }
);

export default PlasmicImageLightbox;
/* prettier-ignore-end */
