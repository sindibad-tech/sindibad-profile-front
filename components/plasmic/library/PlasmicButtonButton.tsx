// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p1fHvJbiLdgzRrAS359KQb
// Component: 99pKO0LKqxZl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import sty from "./PlasmicButtonButton.module.css"; // plasmic-import: 99pKO0LKqxZl/css

createPlasmicElementProxy;

export type PlasmicButtonButton__VariantMembers = {
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
  size: "small";
  color: "themeSecondary" | "stateSuccess" | "stateError";
  language: "en" | "iconOnly";
  isDisabled: "isDisabled";
  type: "outline" | "link";
};
export type PlasmicButtonButton__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  size?: SingleChoiceArg<"small">;
  color?: SingleChoiceArg<"themeSecondary" | "stateSuccess" | "stateError">;
  language?: SingleChoiceArg<"en" | "iconOnly">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  type?: SingleChoiceArg<"outline" | "link">;
};
type VariantPropType = keyof PlasmicButtonButton__VariantsArgs;
export const PlasmicButtonButton__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "showEndIcon",
  "size",
  "color",
  "language",
  "isDisabled",
  "type"
);

export type PlasmicButtonButton__ArgsType = {
  link?: string;
  submitsForm?: boolean;
  target?: boolean;
  text?: string;
  direction?: string;
  startIcon?: string;
  endIcon?: string;
};
type ArgPropType = keyof PlasmicButtonButton__ArgsType;
export const PlasmicButtonButton__ArgProps = new Array<ArgPropType>(
  "link",
  "submitsForm",
  "target",
  "text",
  "direction",
  "startIcon",
  "endIcon"
);

export type PlasmicButtonButton__OverridesType = {
  root?: Flex__<"button">;
  text?: Flex__<"div">;
};

export interface DefaultButtonButtonProps extends pp.BaseButtonProps {
  submitsForm?: boolean;
  target?: boolean;
  text?: string;
  direction?: string;
  size?: SingleChoiceArg<"small">;
  color?: SingleChoiceArg<"themeSecondary" | "stateSuccess" | "stateError">;
  language?: SingleChoiceArg<"en" | "iconOnly">;
  type?: SingleChoiceArg<"outline" | "link">;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButtonButton__RenderFunc(props: {
  variants: PlasmicButtonButton__VariantsArgs;
  args: PlasmicButtonButton__ArgsType;
  overrides: PlasmicButtonButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          text: "button",
          direction: "rtl",
          startIcon:
            '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--ic" width="100%" height="100%" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8z"></path></svg>',
          endIcon:
            '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--ic" width="100%" height="100%" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8z"></path></svg>'
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon
      },
      {
        path: "showEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showEndIcon
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "language",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.language
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_stateError]: hasVariant($state, "color", "stateError"),
          [sty.rootcolor_stateSuccess]: hasVariant(
            $state,
            "color",
            "stateSuccess"
          ),
          [sty.rootcolor_themeSecondary]: hasVariant(
            $state,
            "color",
            "themeSecondary"
          ),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootlanguage_en]: hasVariant($state, "language", "en"),
          [sty.rootlanguage_iconOnly]: hasVariant(
            $state,
            "language",
            "iconOnly"
          ),
          [sty.rootshowEndIcon]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          ),
          [sty.rootshowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.roottype_link]: hasVariant($state, "type", "link"),
          [sty.roottype_outline]: hasVariant($state, "type", "outline"),
          [sty.roottype_outline_color_stateError]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "type", "outline"),
          [sty.roottype_outline_color_stateSuccess]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "type", "outline"),
          [sty.roottype_outline_color_themeSecondary]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "type", "outline"),
          [sty.roottype_outline_isDisabled_color_stateSuccess]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline")
        }
      )}
      dir={args.direction}
    >
      <Embed
        className={classNames("__wab_instance", sty.embedHtml__bNcN9, {
          [sty.embedHtmlcolor_stateError_type_link__bNcN9Dm5TxYPBoJ]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "stateError"),
          [sty.embedHtmlcolor_stateSuccess_type_link__bNcN9EcXpeYPBoJ]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "stateSuccess"),
          [sty.embedHtmlcolor_themeSecondary_type_link__bNcN9CEAJYPBoJ]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "themeSecondary"),
          [sty.embedHtmlisDisabled__bNcN98RpIw]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.embedHtmlisDisabled_color_stateError_type_link__bNcN98RpIwDm5TxYPBoJ]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.embedHtmlisDisabled_color_stateSuccess_type_link__bNcN98RpIwEcXpeYPBoJ]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.embedHtmlisDisabled_color_themeSecondary_type_link__bNcN98RpIwCEAJYPBoJ]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.embedHtmllanguage_iconOnly__bNcN9UiqRd]: hasVariant(
            $state,
            "language",
            "iconOnly"
          ),
          [sty.embedHtmlshowStartIcon__bNcN90394O]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.embedHtmltype_link__bNcN9YPBoJ]: hasVariant(
            $state,
            "type",
            "link"
          ),
          [sty.embedHtmltype_outline__bNcN97H8Vd]: hasVariant(
            $state,
            "type",
            "outline"
          ),
          [sty.embedHtmltype_outline_color_stateError__bNcN97H8VdDm5Tx]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_color_stateSuccess__bNcN97H8VdEcXpe]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_color_themeSecondary__bNcN97H8VdCEAJ]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_isDisabled_color_stateError__bNcN97H8Vd8RpIwDm5Tx]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_isDisabled_color_stateSuccess__bNcN97H8Vd8RpIwEcXpe]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_isDisabled_color_themeSecondary__bNcN97H8Vd8RpIwCEAJ]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline")
        })}
        code={(() => {
          try {
            return $props.startIcon;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--ic" width="100%" height="100%" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8z"></path></svg>';
            }
            throw e;
          }
        })()}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textcolor_stateError_type_link]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "stateError"),
          [sty.textcolor_stateSuccess_type_link]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "stateSuccess"),
          [sty.textcolor_themeSecondary_type_link]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "themeSecondary"),
          [sty.textisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.textisDisabled_color_stateError_type_link]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.textisDisabled_color_stateSuccess_type_link]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.textisDisabled_color_themeSecondary_type_link]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.textlanguage_iconOnly]: hasVariant(
            $state,
            "language",
            "iconOnly"
          ),
          [sty.texttype_link]: hasVariant($state, "type", "link"),
          [sty.texttype_outline]: hasVariant($state, "type", "outline"),
          [sty.texttype_outline_color_stateError]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "type", "outline"),
          [sty.texttype_outline_color_stateSuccess]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "type", "outline"),
          [sty.texttype_outline_color_themeSecondary]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "type", "outline"),
          [sty.texttype_outline_isDisabled_color_stateError]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline"),
          [sty.texttype_outline_isDisabled_color_stateSuccess]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline"),
          [sty.texttype_outline_isDisabled_color_themeSecondary]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline")
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "button";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Embed
        className={classNames("__wab_instance", sty.embedHtml__vrC, {
          [sty.embedHtmlcolor_stateError_type_link__vrCdm5TxYPBoJ]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "stateError"),
          [sty.embedHtmlcolor_stateSuccess_type_link__vrCEcXpeYPBoJ]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "stateSuccess"),
          [sty.embedHtmlcolor_themeSecondary_type_link__vrCcEAJYPBoJ]:
            hasVariant($state, "type", "link") &&
            hasVariant($state, "color", "themeSecondary"),
          [sty.embedHtmlisDisabled__vrC8RpIw]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.embedHtmlisDisabled_color_stateError_type_link__vrC8RpIwDm5TxYPBoJ]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.embedHtmlisDisabled_color_stateSuccess_type_link__vrC8RpIwEcXpeYPBoJ]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.embedHtmlisDisabled_color_themeSecondary_type_link__vrC8RpIwCEAJYPBoJ]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "link"),
          [sty.embedHtmlshowEndIcon__vrCfaGcC]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          ),
          [sty.embedHtmltype_link__vrCyPBoJ]: hasVariant(
            $state,
            "type",
            "link"
          ),
          [sty.embedHtmltype_outline__vrC7H8Vd]: hasVariant(
            $state,
            "type",
            "outline"
          ),
          [sty.embedHtmltype_outline_color_stateError__vrC7H8VdDm5Tx]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_color_stateSuccess__vrC7H8VdEcXpe]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_color_themeSecondary__vrC7H8VdCEAJ]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_isDisabled_color_stateError__vrC7H8Vd8RpIwDm5Tx]:
            hasVariant($state, "color", "stateError") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_isDisabled_color_stateSuccess__vrC7H8Vd8RpIwEcXpe]:
            hasVariant($state, "color", "stateSuccess") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline"),
          [sty.embedHtmltype_outline_isDisabled_color_themeSecondary__vrC7H8Vd8RpIwCEAJ]:
            hasVariant($state, "color", "themeSecondary") &&
            hasVariant($state, "isDisabled", "isDisabled") &&
            hasVariant($state, "type", "outline")
        })}
        code={(() => {
          try {
            return $props.endIcon;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--ic" width="100%" height="100%" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8z"></path></svg>';
            }
            throw e;
          }
        })()}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.PlumeButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicButtonButton>(
    PlasmicButtonButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },
    ref
  );
  if (b.plasmicProps.overrides.root.as === "a") {
    b.plasmicProps.overrides.root.as = PlasmicLink__;
    b.plasmicProps.overrides.root.props.component = Link;
    b.plasmicProps.overrides.root.props.platform = "nextjs";
  }
  return b;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonButton__VariantsArgs;
    args?: PlasmicButtonButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButtonButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButtonButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonButton__ArgProps,
          internalVariantPropNames: PlasmicButtonButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonButton";
  } else {
    func.displayName = `PlasmicButtonButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonButton = Object.assign(
  // Top-level PlasmicButtonButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicButtonButton
    internalVariantProps: PlasmicButtonButton__VariantProps,
    internalArgProps: PlasmicButtonButton__ArgProps,

    useBehavior
  }
);

export default PlasmicButtonButton;
/* prettier-ignore-end */
