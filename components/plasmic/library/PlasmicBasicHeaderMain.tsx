// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p1fHvJbiLdgzRrAS359KQb
// Component: 68vzBgIlCkRh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonButton from "../../ButtonButton"; // plasmic-import: 99pKO0LKqxZl/component
import BrandingSindibadLogotype from "../../BrandingSindibadLogotype"; // plasmic-import: W8g1z9kFPMYL/component
import ButtonDrop from "../../ButtonDrop"; // plasmic-import: T8QryWKJz10k/component
import ListListItem from "../../ListListItem"; // plasmic-import: ZyeNfPf0ahk3/component

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import sty from "./PlasmicBasicHeaderMain.module.css"; // plasmic-import: 68vzBgIlCkRh/css

createPlasmicElementProxy;

export type PlasmicBasicHeaderMain__VariantMembers = {
  open: "open";
  headerType: "defaultHeader" | "appHeader";
};
export type PlasmicBasicHeaderMain__VariantsArgs = {
  open?: SingleBooleanChoiceArg<"open">;
  headerType?: SingleChoiceArg<"defaultHeader" | "appHeader">;
};
type VariantPropType = keyof PlasmicBasicHeaderMain__VariantsArgs;
export const PlasmicBasicHeaderMain__VariantProps = new Array<VariantPropType>(
  "open",
  "headerType"
);

export type PlasmicBasicHeaderMain__ArgsType = {
  dir?: string;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicBasicHeaderMain__ArgsType;
export const PlasmicBasicHeaderMain__ArgProps = new Array<ArgPropType>(
  "dir",
  "onClick"
);

export type PlasmicBasicHeaderMain__OverridesType = {
  headerBase?: Flex__<"header">;
  contentContainer?: Flex__<"div">;
  brandingSindibadLogotype?: Flex__<typeof BrandingSindibadLogotype>;
};

export interface DefaultBasicHeaderMainProps {
  dir?: string;
  onClick?: (event: any) => void;
  open?: SingleBooleanChoiceArg<"open">;
  headerType?: SingleChoiceArg<"defaultHeader" | "appHeader">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBasicHeaderMain__RenderFunc(props: {
  variants: PlasmicBasicHeaderMain__VariantsArgs;
  args: PlasmicBasicHeaderMain__ArgsType;
  overrides: PlasmicBasicHeaderMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          dir: "rtl"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "open",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.open
      },
      {
        path: "headerType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.headerType
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <header
      data-plasmic-name={"headerBase"}
      data-plasmic-override={overrides.headerBase}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.headerBase,
        {
          [sty.headerBaseheaderType_appHeader]: hasVariant(
            $state,
            "headerType",
            "appHeader"
          ),
          [sty.headerBaseheaderType_appHeader_open]:
            hasVariant($state, "open", "open") &&
            hasVariant($state, "headerType", "appHeader"),
          [sty.headerBaseheaderType_defaultHeader]: hasVariant(
            $state,
            "headerType",
            "defaultHeader"
          ),
          [sty.headerBaseopen]: hasVariant($state, "open", "open")
        }
      )}
      dir={args.dir}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__pSVr, {
          [sty.freeBoxheaderType_appHeader__pSVrQjU8]: hasVariant(
            $state,
            "headerType",
            "appHeader"
          ),
          [sty.freeBoxheaderType_appHeader_open__pSVrQjU8RzV0Y]:
            hasVariant($state, "open", "open") &&
            hasVariant($state, "headerType", "appHeader"),
          [sty.freeBoxopen__pSVrRzV0Y]: hasVariant($state, "open", "open")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"contentContainer"}
          data-plasmic-override={overrides.contentContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.contentContainer, {
            [sty.contentContainerheaderType_appHeader]: hasVariant(
              $state,
              "headerType",
              "appHeader"
            ),
            [sty.contentContainerheaderType_defaultHeader]: hasVariant(
              $state,
              "headerType",
              "defaultHeader"
            ),
            [sty.contentContaineropen]: hasVariant($state, "open", "open")
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___6K8F, {
              [sty.freeBoxheaderType_appHeader___6K8FQjU8]: hasVariant(
                $state,
                "headerType",
                "appHeader"
              ),
              [sty.freeBoxopen___6K8FRzV0Y]: hasVariant($state, "open", "open")
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yIlA8, {
                [sty.freeBoxheaderType_appHeader__yIlA8QjU8]: hasVariant(
                  $state,
                  "headerType",
                  "appHeader"
                )
              })}
            >
              <ButtonButton
                className={classNames(
                  "__wab_instance",
                  sty.buttonButton___3EPc5,
                  {
                    [sty.buttonButtonheaderType_appHeader___3EPc5QjU8]:
                      hasVariant($state, "headerType", "appHeader"),
                    [sty.buttonButtonheaderType_appHeader_open___3EPc5QjU8RzV0Y]:
                      hasVariant($state, "open", "open") &&
                      hasVariant($state, "headerType", "appHeader"),
                    [sty.buttonButtonopen___3EPc5RzV0Y]: hasVariant(
                      $state,
                      "open",
                      "open"
                    )
                  }
                )}
                color={"themeSecondary"}
                language={"iconOnly"}
                onClick={args.onClick}
                startIcon={
                  '<svg width="auto" height="auto" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.59009 16.59L13.1701 12L8.59009 7.41L10.0001 6L16.0001 12L10.0001 18L8.59009 16.59Z" fill="currentcolor"/></svg>'
                }
                type={"link"}
              />

              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__mVpez,
                  {
                    [sty.linkheaderType_appHeader_open__mVpezQjU8RzV0Y]:
                      hasVariant($state, "headerType", "appHeader") &&
                      hasVariant($state, "open", "open")
                  }
                )}
                component={Link}
                href={"https://sindibad.iq"}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return (window.location.href =
                                "https://sindibad.iq");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                platform={"nextjs"}
              >
                <BrandingSindibadLogotype
                  data-plasmic-name={"brandingSindibadLogotype"}
                  data-plasmic-override={overrides.brandingSindibadLogotype}
                  className={classNames(
                    "__wab_instance",
                    sty.brandingSindibadLogotype,
                    {
                      [sty.brandingSindibadLogotypeheaderType_appHeader]:
                        hasVariant($state, "headerType", "appHeader"),
                      [sty.brandingSindibadLogotypeheaderType_appHeader_open]:
                        hasVariant($state, "headerType", "appHeader") &&
                        hasVariant($state, "open", "open")
                    }
                  )}
                  typeOnly={
                    hasVariant($state, "headerType", "appHeader") &&
                    hasVariant($state, "open", "open") &&
                    hasVariant(globalVariants, "screen", "mobileSmall")
                      ? undefined
                      : hasVariant($state, "open", "open") &&
                        hasVariant($state, "headerType", "appHeader") &&
                        hasVariant(globalVariants, "screen", "mobileBig")
                      ? undefined
                      : hasVariant($state, "headerType", "appHeader")
                      ? true
                      : undefined
                  }
                />
              </PlasmicLink__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3PKz7, {
                [sty.freeBoxheaderType_appHeader___3PKz7QjU8]: hasVariant(
                  $state,
                  "headerType",
                  "appHeader"
                )
              })}
            >
              <ButtonButton
                className={classNames(
                  "__wab_instance",
                  sty.buttonButton__gaW0S,
                  {
                    [sty.buttonButtonopen__gaW0SRzV0Y]: hasVariant(
                      $state,
                      "open",
                      "open"
                    )
                  }
                )}
                color={"themeSecondary"}
                language={"iconOnly"}
                link={"https://assistant.sindibad.iq"}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (window.location.href =
                              "https://assistant.sindibad.iq");
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                showStartIcon={true}
                startIcon={
                  '<svg width="auto" height="auto" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M18.72 14.76C19.07 13.91 19.26 13 19.26 12C19.26 11.28 19.15 10.59 18.96 9.95001C18.31 10.1 17.63 10.18 16.92 10.18C15.466 10.1816 14.0329 9.83353 12.7415 9.16523C11.4502 8.49693 10.3384 7.52796 9.5 6.34001C8.6031 8.51018 6.91112 10.2558 4.77 11.22C4.73 11.47 4.73 11.74 4.73 12C4.73 12.9547 4.91804 13.9001 5.2834 14.7821C5.64875 15.6642 6.18425 16.4656 6.85933 17.1407C8.22272 18.5041 10.0719 19.27 12 19.27C13.05 19.27 14.06 19.04 14.97 18.63C15.54 19.72 15.8 20.26 15.78 20.26C14.14 20.81 12.87 21.08 12 21.08C9.58 21.08 7.27 20.13 5.57 18.42C4.536 17.3892 3.76737 16.123 3.33 14.73H2V10.18H3.09C3.42024 8.57252 4.17949 7.08442 5.28719 5.8736C6.39489 4.66278 7.80971 3.77441 9.38153 3.30277C10.9534 2.83112 12.6235 2.79378 14.2149 3.19471C15.8062 3.59565 17.2593 4.4199 18.42 5.58001C19.6802 6.83526 20.5398 8.43611 20.89 10.18H22V14.73H21.94L18.38 18L13.08 17.4V15.73H17.91L18.72 14.76ZM9.27 11.77C9.57 11.77 9.86 11.89 10.07 12.11C10.281 12.3228 10.3995 12.6103 10.3995 12.91C10.3995 13.2097 10.281 13.4972 10.07 13.71C9.86 13.92 9.57 14.04 9.27 14.04C8.64 14.04 8.13 13.54 8.13 12.91C8.13 12.28 8.64 11.77 9.27 11.77ZM14.72 11.77C15.35 11.77 15.85 12.28 15.85 12.91C15.85 13.54 15.35 14.04 14.72 14.04C14.09 14.04 13.58 13.54 13.58 12.91C13.58 12.6077 13.7001 12.3177 13.9139 12.1039C14.1277 11.8901 14.4177 11.77 14.72 11.77Z" fill="currentcolor"/></svg>'
                }
                text={"\u062a\u0648\u0627\u0635\u0644 \u0645\u0639\u0646\u0627"}
                type={"link"}
              />

              <ButtonButton
                className={classNames(
                  "__wab_instance",
                  sty.buttonButton__bjkyy,
                  {
                    [sty.buttonButtonheaderType_appHeader_open__bjkyyQjU8RzV0Y]:
                      hasVariant($state, "headerType", "appHeader") &&
                      hasVariant($state, "open", "open"),
                    [sty.buttonButtonopen__bjkyyRzV0Y]: hasVariant(
                      $state,
                      "open",
                      "open"
                    )
                  }
                )}
                color={"themeSecondary"}
                language={"iconOnly"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateOpen"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "open", operation: 2 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          const oldValue = $stateGet($state, vgroup);
                          $stateSet($state, vgroup, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateOpen"] != null &&
                    typeof $steps["updateOpen"] === "object" &&
                    typeof $steps["updateOpen"].then === "function"
                  ) {
                    $steps["updateOpen"] = await $steps["updateOpen"];
                  }
                }}
                startIcon={
                  hasVariant($state, "open", "open") &&
                  hasVariant(globalVariants, "screen", "mobileBig")
                    ? '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--ic" width="100%" height="100%" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M18.3 5.71a.996.996 0 0 0-1.41 0L12 10.59L7.11 5.7A.996.996 0 1 0 5.7 7.11L10.59 12L5.7 16.89a.996.996 0 1 0 1.41 1.41L12 13.41l4.89 4.89a.996.996 0 1 0 1.41-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z"></path></svg>'
                    : '<svg width="auto" height="auto" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 6H21V8H3V6ZM3 11H21V13H3V11ZM3 16H21V18H3V16Z" fill="currentcolor"/></svg>'
                }
                type={"link"}
              />
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ehg7G, {
              [sty.freeBoxheaderType_appHeader__ehg7GQjU8]: hasVariant(
                $state,
                "headerType",
                "appHeader"
              ),
              [sty.freeBoxheaderType_appHeader_open__ehg7GQjU8RzV0Y]:
                hasVariant($state, "open", "open") &&
                hasVariant($state, "headerType", "appHeader"),
              [sty.freeBoxopen__ehg7GRzV0Y]: hasVariant($state, "open", "open")
            })}
          >
            <ButtonDrop
              className={classNames("__wab_instance", sty.buttonDrop___2De4N, {
                [sty.buttonDropheaderType_appHeader___2De4NQjU8]: hasVariant(
                  $state,
                  "headerType",
                  "appHeader"
                ),
                [sty.buttonDropopen___2De4NRzV0Y]: hasVariant(
                  $state,
                  "open",
                  "open"
                )
              })}
              dir={args.dir}
              dropText={
                "\u062e\u062f\u0645\u0627\u062a \u0627\u0644\u062d\u062c\u0632"
              }
              open={
                hasVariant($state, "open", "open")
                  ? true
                  : hasVariant(globalVariants, "screen", "mobileSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "mobileBig")
                  ? true
                  : undefined
              }
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [
                      [
                        "طيران",
                        "Flight",
                        `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M23.0001 9.31992C23.0627 9.06298 23.0271 8.79191 22.9001 8.55992C22.576 7.99757 22.1441 7.50474 21.6291 7.10972C21.114 6.7147 20.5261 6.42527 19.8989 6.25803C19.2718 6.09079 18.6178 6.04904 17.9745 6.13517C17.3312 6.22129 16.7112 6.43361 16.1501 6.75992L14.0001 7.99992L9.00011 5.64992C8.85796 5.57628 8.7002 5.53784 8.54011 5.53784C8.38002 5.53784 8.22226 5.57628 8.08011 5.64992L5.08011 7.37992C4.93185 7.46544 4.80802 7.58759 4.72047 7.73466C4.63293 7.88174 4.5846 8.04882 4.58011 8.21992C4.57527 8.39229 4.61508 8.56298 4.69568 8.71543C4.77628 8.86787 4.89493 8.99687 5.04011 9.08992L8.34011 11.1699L6.60011 12.1699L1.82011 12.7499C1.62796 12.7737 1.44683 12.8527 1.29873 12.9774C1.15063 13.1022 1.04192 13.2672 0.985801 13.4525C0.929679 13.6378 0.92856 13.8354 0.982579 14.0214C1.0366 14.2073 1.14343 14.3735 1.29011 14.4999L4.83011 17.5599C5.29616 18.0047 5.89301 18.2877 6.53236 18.3669C7.1717 18.4462 7.81957 18.3175 8.38011 17.9999L22.5001 9.92992C22.6205 9.86746 22.7268 9.78117 22.8128 9.6763C22.8987 9.57144 22.9625 9.45019 23.0001 9.31992ZM7.47011 16.3199C7.27802 16.4256 7.05651 16.4653 6.83969 16.4327C6.62286 16.4002 6.42274 16.2973 6.27011 16.1399L4.37011 14.5099L7.10011 14.1799C7.23426 14.1627 7.36354 14.1185 7.48011 14.0499L10.8401 12.1199C10.9898 12.0335 11.1145 11.9098 11.2022 11.7608C11.2898 11.6119 11.3373 11.4427 11.3401 11.2699C11.3422 11.0983 11.3 10.929 11.2177 10.7784C11.1354 10.6278 11.0157 10.5009 10.8701 10.4099L7.57011 8.31992L8.67011 7.68992L13.6701 10.0099C13.8123 10.0836 13.97 10.122 14.1301 10.122C14.2902 10.122 14.448 10.0836 14.5901 10.0099L17.1501 8.52992C17.6747 8.23592 18.2756 8.10638 18.8747 8.15809C19.4739 8.2098 20.0436 8.44038 20.5101 8.81992L7.47011 16.3199Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq"
                      ],
                      [
                        "فنادق",
                        "Hotel",
                        `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8 5C8 4.20435 8.31607 3.44129 8.87868 2.87868C9.44129 2.31607 10.2044 2 11 2H19C19.7956 2 20.5587 2.31607 21.1213 2.87868C21.6839 3.44129 22 4.20435 22 5V19C22 19.7956 21.6839 20.5587 21.1213 21.1213C20.5587 21.6839 19.7956 22 19 22H11C10.2044 22 9.44129 21.6839 8.87868 21.1213C8.31607 20.5587 8 19.7956 8 19V5ZM11 4C10.7348 4 10.4804 4.10536 10.2929 4.29289C10.1054 4.48043 10 4.73478 10 5V19C10 19.2652 10.1054 19.5196 10.2929 19.7071C10.4804 19.8946 10.7348 20 11 20H19C19.2652 20 19.5196 19.8946 19.7071 19.7071C19.8946 19.5196 20 19.2652 20 19V5C20 4.73478 19.8946 4.48043 19.7071 4.29289C19.5196 4.10536 19.2652 4 19 4H11Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2 11C2 10.2044 2.31607 9.44129 2.87868 8.87868C3.44129 8.31607 4.20435 8 5 8H9.5V10H5C4.73478 10 4.48043 10.1054 4.29289 10.2929C4.10536 10.4804 4 10.7348 4 11V19C4 19.2652 4.10536 19.5196 4.29289 19.7071C4.48043 19.8946 4.73478 20 5 20H14.5V22H5C4.20435 22 3.44129 21.6839 2.87868 21.1213C2.31607 20.5587 2 19.7956 2 19V11Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12 17C12 16.4696 12.2107 15.9609 12.5858 15.5858C12.9609 15.2107 13.4696 15 14 15H16C16.5304 15 17.0391 15.2107 17.4142 15.5858C17.7893 15.9609 18 16.4696 18 17V20H16V17H14V20H12V17Z" fill="currentcolor"/>
<path d="M12 6C12 5.73478 12.1054 5.48043 12.2929 5.29289C12.4804 5.10536 12.7348 5 13 5C13.2652 5 13.5196 5.10536 13.7071 5.29289C13.8946 5.48043 14 5.73478 14 6V7C14 7.26522 13.8946 7.51957 13.7071 7.70711C13.5196 7.89464 13.2652 8 13 8C12.7348 8 12.4804 7.89464 12.2929 7.70711C12.1054 7.51957 12 7.26522 12 7V6ZM12 11C12 10.7348 12.1054 10.4804 12.2929 10.2929C12.4804 10.1054 12.7348 10 13 10C13.2652 10 13.5196 10.1054 13.7071 10.2929C13.8946 10.4804 14 10.7348 14 11V12C14 12.2652 13.8946 12.5196 13.7071 12.7071C13.5196 12.8946 13.2652 13 13 13C12.7348 13 12.4804 12.8946 12.2929 12.7071C12.1054 12.5196 12 12.2652 12 12V11ZM5 15C5 14.7348 5.10536 14.4804 5.29289 14.2929C5.48043 14.1054 5.73478 14 6 14C6.26522 14 6.51957 14.1054 6.70711 14.2929C6.89464 14.4804 7 14.7348 7 15V16C7 16.2652 6.89464 16.5196 6.70711 16.7071C6.51957 16.8946 6.26522 17 6 17C5.73478 17 5.48043 16.8946 5.29289 16.7071C5.10536 16.5196 5 16.2652 5 16V15ZM16 6C16 5.73478 16.1054 5.48043 16.2929 5.29289C16.4804 5.10536 16.7348 5 17 5C17.2652 5 17.5196 5.10536 17.7071 5.29289C17.8946 5.48043 18 5.73478 18 6V7C18 7.26522 17.8946 7.51957 17.7071 7.70711C17.5196 7.89464 17.2652 8 17 8C16.7348 8 16.4804 7.89464 16.2929 7.70711C16.1054 7.51957 16 7.26522 16 7V6ZM16 11C16 10.7348 16.1054 10.4804 16.2929 10.2929C16.4804 10.1054 16.7348 10 17 10C17.2652 10 17.5196 10.1054 17.7071 10.2929C17.8946 10.4804 18 10.7348 18 11V12C18 12.2652 17.8946 12.5196 17.7071 12.7071C17.5196 12.8946 17.2652 13 17 13C16.7348 13 16.4804 12.8946 16.2929 12.7071C16.1054 12.5196 16 12.2652 16 12V11Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq/?type=hotel"
                      ],
                      [
                        "تأشيرات",
                        "Visa",
                        `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M12 5C13.3261 5 14.5979 5.52678 15.5355 6.46447C16.4732 7.40215 17 8.67392 17 10C17 11.3261 16.4732 12.5979 15.5355 13.5355C14.5979 14.4732 13.3261 15 12 15C10.6739 15 9.40215 14.4732 8.46447 13.5355C7.52678 12.5979 7 11.3261 7 10C7 8.67392 7.52678 7.40215 8.46447 6.46447C9.40215 5.52678 10.6739 5 12 5ZM11.04 8C11.25 7.29 11.59 6.62 12 6C12.421 6.61331 12.7448 7.28792 12.96 8H11.04ZM8.54 8C9 7.17 9.78 6.53 10.7 6.22C10.4 6.78 10.18 7.38 10 8H8.54ZM14 8C13.82 7.38 13.59 6.78 13.29 6.22C14.21 6.54 15 7.17 15.46 8H14ZM8 10C8 9.65 8.05 9.32 8.13 9H9.82C9.78 9.33 9.75 9.66 9.75 10C9.75 10.34 9.78 10.67 9.82 11H8.13C8.05 10.68 8 10.35 8 10ZM10.75 10C10.75 9.66 10.78 9.32 10.83 9H13.17C13.21 9.32 13.25 9.66 13.25 10C13.25 10.34 13.21 10.67 13.17 11H10.83C10.78 10.67 10.75 10.34 10.75 10ZM14.25 10C14.25 9.66 14.22 9.33 14.18 9H15.87C15.95 9.32 16 9.65 16 10C16 10.35 15.95 10.68 15.87 11H14.18C14.22 10.67 14.25 10.34 14.25 10ZM10.7 13.78C9.78 13.46 9 12.83 8.54 12H10C10.18 12.63 10.4 13.22 10.7 13.78ZM12 14C11.59 13.38 11.25 12.72 11.04 12H12.96C12.75 12.72 12.42 13.38 12 14ZM13.29 13.78C13.59 13.22 13.82 12.63 14 12H15.46C15 12.83 14.21 13.46 13.29 13.78Z" fill="currentcolor"/>
<path d="M9 17.25C8.58579 17.25 8.25 17.5858 8.25 18C8.25 18.4142 8.58579 18.75 9 18.75H15C15.4142 18.75 15.75 18.4142 15.75 18C15.75 17.5858 15.4142 17.25 15 17.25H9Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M5 1H19C20.1 1 21 1.9 21 3V21C21 22.1 20.1 23 19 23H5C4.46957 23 3.96086 22.7893 3.58579 22.4142C3.21071 22.0391 3 21.5304 3 21V3C3 2.46957 3.21071 1.96086 3.58579 1.58579C3.96086 1.21071 4.46957 1 5 1ZM19 2.5H5C4.86739 2.5 4.74021 2.55268 4.64645 2.64645C4.55268 2.74021 4.5 2.86739 4.5 3V21C4.5 21.1326 4.55268 21.2598 4.64645 21.3536C4.74022 21.4473 4.86739 21.5 5 21.5H19C19.2716 21.5 19.5 21.2716 19.5 21V3C19.5 2.72843 19.2716 2.5 19 2.5Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq/?type=visa"
                      ]
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__cl5N9
                    )}
                    component={Link}
                    href={(() => {
                      try {
                        return currentItem[3];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (window.location.href = currentItem[3]);
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <ListListItem
                      className={classNames(
                        "__wab_instance",
                        sty.listListItem__rXyef,
                        {
                          [sty.listListItemheaderType_appHeader_open__rXyefQjU8RzV0Y]:
                            hasVariant($state, "open", "open") &&
                            hasVariant($state, "headerType", "appHeader"),
                          [sty.listListItemopen__rXyefRzV0Y]: hasVariant(
                            $state,
                            "open",
                            "open"
                          )
                        }
                      )}
                      dir={args.dir}
                      icon={(() => {
                        try {
                          return currentItem[2];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--ic" width="100%" height="100%" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8z"></path></svg>';
                          }
                          throw e;
                        }
                      })()}
                      text={(() => {
                        try {
                          return currentItem[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "item";
                          }
                          throw e;
                        }
                      })()}
                    />
                  </PlasmicLink__>
                );
              })}
            </ButtonDrop>
            <ButtonDrop
              dir={args.dir}
              dropText={
                "\u0623\u062f\u0648\u0627\u062a \u0627\u0644\u0633\u0641\u0631"
              }
              open={
                hasVariant($state, "open", "open")
                  ? true
                  : hasVariant(globalVariants, "screen", "mobileSmall")
                  ? true
                  : hasVariant(globalVariants, "screen", "mobileBig")
                  ? true
                  : undefined
              }
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [
                      [
                        "معلومات المطار",
                        "Airport Information",
                        `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8.75 2C8.75 1.58579 8.41421 1.25 8 1.25C7.58579 1.25 7.25 1.58579 7.25 2V3.25H5.69361L5.69121 3.25L5.68973 3.25001C5.40736 3.25101 5.10186 3.31475 4.84134 3.51171C4.57206 3.71529 4.44005 3.99342 4.38707 4.24994C4.29296 4.7055 4.42414 5.20236 4.54491 5.55883C4.62475 5.7945 4.72307 6.03147 4.82121 6.25H3.58996C3.29484 6.25012 3.00241 6.32489 2.74277 6.4684C2.4838 6.61154 2.26536 6.81801 2.10786 7.06851C1.95036 7.319 1.85895 7.60535 1.84217 7.90076C1.8254 8.19611 1.88376 8.49088 2.01182 8.75755L3.45182 11.7575C3.59453 12.0546 3.81833 12.3056 4.09728 12.4811C4.37623 12.6567 4.69908 12.7499 5.02867 12.75H5.25V20.25H3C2.58579 20.25 2.25 20.5858 2.25 21C2.25 21.4142 2.58579 21.75 3 21.75H21C21.4142 21.75 21.75 21.4142 21.75 21C21.75 20.5858 21.4142 20.25 21 20.25H19.75V19C19.75 18.2707 19.4603 17.5712 18.9445 17.0555C18.4288 16.5397 17.7293 16.25 17 16.25H10.75V12.75H10.971C11.3005 12.7499 11.6237 12.6567 11.9026 12.4811C12.1816 12.3056 12.4053 12.0548 12.548 11.7577L13.988 8.75775C14.1161 8.49095 14.1746 8.19582 14.1577 7.90033C14.1409 7.60476 14.0493 7.31831 13.8916 7.06777C13.7339 6.81722 13.5152 6.61079 13.256 6.46777C12.9969 6.32482 12.7058 6.2499 12.41 6.25H11.1788C11.2771 6.03087 11.3756 5.79322 11.4555 5.55689C11.5761 5.20021 11.7073 4.70265 11.6126 4.24691C11.5592 3.99008 11.4264 3.71163 11.1559 3.50856C10.8938 3.31192 10.5879 3.24965 10.3051 3.25H8.75V2ZM18.25 19V20.25H10.75V17.75H17C17.3315 17.75 17.6495 17.8817 17.8839 18.1161C18.1183 18.3505 18.25 18.6685 18.25 19ZM9.25 12.75V20.25H6.75V12.75H9.25ZM10.125 4.75C10.1069 4.84197 10.0768 4.95128 10.0345 5.07636C9.93376 5.37437 9.78514 5.69928 9.64026 5.9993C9.61021 6.06152 9.57465 6.13422 9.54028 6.2045L9.51802 6.25H6.48239L6.45919 6.20262C6.42521 6.13325 6.39004 6.06142 6.35991 5.9991C6.21498 5.69939 6.0664 5.37507 5.96559 5.07751C5.92303 4.95191 5.89289 4.84221 5.87477 4.75H10.125ZM5.9841 7.75C5.99489 7.75024 6.0057 7.75024 6.01653 7.75H9.98283C9.99453 7.75028 10.0062 7.75027 10.0178 7.75H12.41C12.4523 7.74997 12.4943 7.76068 12.5313 7.78111L11.1958 11.1085C11.1754 11.1508 11.1435 11.1866 11.1037 11.2116C11.0639 11.2367 11.0177 11.25 10.9707 11.25H5.02926C4.98217 11.25 4.93605 11.2367 4.8962 11.2116C4.85635 11.1865 4.82439 11.1507 4.80401 11.1082L3.3641 8.10845C3.3458 8.07035 3.33736 8.02803 3.33976 7.98582C3.34216 7.94362 3.35521 7.90272 3.37771 7.86693C3.40021 7.83114 3.43142 7.80165 3.46842 7.7812C3.50474 7.76112 3.54722 7.75002 3.59026 7.75H5.9841ZM12.5313 7.78111C12.5684 7.80154 12.5996 7.83103 12.6221 7.86682C12.6447 7.90262 12.6578 7.94354 12.6602 7.98576C12.6626 8.02798 12.6542 8.07013 12.6359 8.10825L11.1958 11.1085L12.5313 7.78111Z" fill="currentcolor"/>
<path d="M18.5303 2.46967C18.2374 2.17678 17.7626 2.17678 17.4697 2.46967C17.1768 2.76256 17.1768 3.23744 17.4697 3.53033L18.1893 4.25H16.3107L15.5303 3.46967C15.2374 3.17678 14.7626 3.17678 14.4697 3.46967C14.1768 3.76256 14.1768 4.23744 14.4697 4.53033L15.4697 5.53033C15.6103 5.67098 15.8011 5.75 16 5.75H18.1893L17.4697 6.46967C17.1768 6.76256 17.1768 7.23744 17.4697 7.53033C17.7626 7.82322 18.2374 7.82322 18.5303 7.53033L20.3107 5.75H22C22.4142 5.75 22.75 5.41421 22.75 5C22.75 4.58579 22.4142 4.25 22 4.25H20.3107L18.5303 2.46967Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq/airports"
                      ],
                      [
                        "تتبع رحلات",
                        "Flight Tracking",
                        `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8.10135 15.7289C8.20455 16.1301 7.96301 16.5389 7.56185 16.6421C6.80271 16.8374 6.23362 17.0728 5.87281 17.3087C5.55727 17.515 5.50832 17.6455 5.5011 17.67C5.50799 17.694 5.54723 17.7899 5.75342 17.9463C6.01381 18.1439 6.438 18.3539 7.02942 18.5437C8.20376 18.9206 9.87285 19.1658 11.75 19.1658C13.6272 19.1658 15.2962 18.9206 16.4706 18.5437C17.062 18.3539 17.4862 18.1439 17.7466 17.9463C17.9528 17.7899 17.992 17.694 17.9989 17.67C17.9917 17.6455 17.9427 17.515 17.6272 17.3087C17.2664 17.0728 16.6973 16.8374 15.9381 16.6421C15.537 16.5389 15.2955 16.1301 15.3986 15.7289C15.5018 15.3278 15.9107 15.0862 16.3119 15.1894C17.153 15.4058 17.8964 15.6926 18.448 16.0532C18.9712 16.3953 19.5 16.9271 19.5 17.6694C19.5 18.3204 19.0893 18.8104 18.6532 19.1413C18.2052 19.4812 17.6042 19.7552 16.9289 19.972C15.5698 20.4081 13.7388 20.6658 11.75 20.6658C9.76116 20.6658 7.93024 20.4081 6.57108 19.972C5.89575 19.7552 5.29481 19.4812 4.84677 19.1413C4.41065 18.8104 4 18.3204 4 17.6694C4 16.9271 4.52881 16.3953 5.05196 16.0532C5.60357 15.6926 6.34699 15.4058 7.18815 15.1894C7.5893 15.0862 7.99816 15.3278 8.10135 15.7289Z" fill="currentcolor"/>
<path d="M11.944 11.1832C12.8595 11.1832 13.6016 10.4411 13.6016 9.52556C13.6016 8.61005 12.8595 7.86789 11.944 7.86789C11.0285 7.86789 10.2863 8.61005 10.2863 9.52556C10.2863 10.4411 11.0285 11.1832 11.944 11.1832Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.75 9.12372C6.75 10.3593 7.34746 12.1575 8.48917 14.2851C9.00357 15.2437 9.58506 16.1908 10.1776 17.0826C10.9902 18.3058 12.7573 18.3058 13.5699 17.0826C14.1624 16.1908 14.7439 15.2437 15.2583 14.2851C16.4 12.1575 16.9974 10.3593 16.9974 9.12372C16.9974 6.37126 14.6262 4 11.8737 4C9.12126 4 6.75 6.37126 6.75 9.12372ZM15.3398 9.12372C15.3398 9.93627 14.9065 11.4348 13.7976 13.5013C13.3132 14.4041 12.7601 15.306 12.1892 16.1653C12.0324 16.4013 11.7151 16.4013 11.5583 16.1653C10.9874 15.306 10.4343 14.4041 9.94983 13.5013C8.84091 11.4348 8.40767 9.93627 8.40767 9.12372C8.40767 7.28676 10.0368 5.65767 11.8737 5.65767C13.7107 5.65767 15.3398 7.28676 15.3398 9.12372Z" fill="currentcolor"/>
<path d="M11.944 11.1832C12.8595 11.1832 13.6016 10.4411 13.6016 9.52556C13.6016 8.61005 12.8595 7.86789 11.944 7.86789C11.0285 7.86789 10.2863 8.61005 10.2863 9.52556C10.2863 10.4411 11.0285 11.1832 11.944 11.1832Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.75 9.12372C6.75 10.3593 7.34746 12.1575 8.48917 14.2851C9.00357 15.2437 9.58506 16.1908 10.1776 17.0826C10.9902 18.3058 12.7573 18.3058 13.5699 17.0826C14.1624 16.1908 14.7439 15.2437 15.2583 14.2851C16.4 12.1575 16.9974 10.3593 16.9974 9.12372C16.9974 6.37126 14.6262 4 11.8737 4C9.12126 4 6.75 6.37126 6.75 9.12372ZM15.3398 9.12372C15.3398 9.93627 14.9065 11.4348 13.7976 13.5013C13.3132 14.4041 12.7601 15.306 12.1892 16.1653C12.0324 16.4013 11.7151 16.4013 11.5583 16.1653C10.9874 15.306 10.4343 14.4041 9.94983 13.5013C8.84091 11.4348 8.40767 9.93627 8.40767 9.12372C8.40767 7.28676 10.0368 5.65767 11.8737 5.65767C13.7107 5.65767 15.3398 7.28676 15.3398 9.12372Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq/flight-tracking"
                      ],
                      [
                        "معلومات طيران",
                        "Popular Flights",
                        `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M19.8939 6.46283C19.9974 6.65189 20.0265 6.87279 19.9754 7.08218C19.9447 7.18834 19.8928 7.28715 19.8228 7.37261C19.7527 7.45807 19.666 7.52839 19.5679 7.5793L8.06093 14.1559C7.60413 14.4147 7.07615 14.5196 6.55512 14.455C6.03409 14.3904 5.54769 14.1598 5.16788 13.7973L2.28298 11.3036C2.16345 11.2006 2.07638 11.0651 2.03236 10.9136C1.98834 10.7621 1.98925 10.601 2.03499 10.45C2.08072 10.299 2.16931 10.1645 2.29001 10.0629C2.4107 9.96123 2.55831 9.89681 2.7149 9.87744L6.61033 9.40478L8.02834 8.58983L5.33902 6.89475C5.22071 6.81892 5.12401 6.71378 5.05833 6.58955C4.99264 6.46532 4.9602 6.32622 4.96415 6.18575C4.9678 6.04631 5.00719 5.91014 5.07853 5.79029C5.14988 5.67043 5.25079 5.57089 5.37162 5.50119L7.81645 4.09134C7.9323 4.03132 8.06086 4 8.19133 4C8.32179 4 8.45035 4.03132 8.5662 4.09134L12.6409 6.00646L14.3931 4.99593C14.8503 4.73 15.3555 4.55698 15.8798 4.48679C16.4041 4.4166 16.9371 4.45062 17.4481 4.58691C17.9592 4.7232 18.4384 4.95908 18.8581 5.28099C19.2778 5.60291 19.6298 6.00454 19.8939 6.46283ZM6.80558 12.8787C6.98228 12.9052 7.16279 12.8729 7.31933 12.7868L17.9462 6.67471C17.5661 6.36541 17.1017 6.1775 16.6135 6.13535C16.1252 6.09321 15.6355 6.19879 15.208 6.43838L13.1217 7.6445C13.0059 7.70451 12.8773 7.73584 12.7469 7.73584C12.6164 7.73584 12.4878 7.70451 12.372 7.6445L8.29727 5.75383L7.40083 6.26724L10.0901 7.97047C10.2088 8.0446 10.3063 8.14801 10.3734 8.27076C10.4405 8.39351 10.4748 8.53145 10.4732 8.67133C10.4709 8.81216 10.4322 8.94999 10.3608 9.0714C10.2893 9.1928 10.1877 9.29362 10.0657 9.36403L7.32748 10.9369C7.23248 10.9928 7.12713 11.0288 7.01781 11.0428L4.79301 11.3117L6.3414 12.6401C6.46578 12.7684 6.62888 12.8522 6.80558 12.8787Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.5 20C18.4875 20 19.4006 19.6819 20.1427 19.1427L21.5303 20.5303C21.8232 20.8232 22.298 20.8232 22.5909 20.5303C22.8838 20.2374 22.8838 19.7626 22.5909 19.4697L21.1931 18.0718C21.7017 17.3429 22 16.4563 22 15.5C22 13.0147 19.9853 11 17.5 11C15.0147 11 13 13.0147 13 15.5C13 17.9853 15.0147 20 17.5 20ZM17.5 18.5C19.1569 18.5 20.5 17.1569 20.5 15.5C20.5 13.8431 19.1569 12.5 17.5 12.5C15.8431 12.5 14.5 13.8431 14.5 15.5C14.5 17.1569 15.8431 18.5 17.5 18.5Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq/popular-flights"
                      ],
                      [
                        "مسارات الجوية",
                        "Popular Routes",
                        `<svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5 16.75C3.75736 16.75 2.75 17.7574 2.75 19C2.75 20.2426 3.75736 21.25 5 21.25C6.24264 21.25 7.25 20.2426 7.25 19C7.25 17.7574 6.24264 16.75 5 16.75ZM1.25 19C1.25 16.9289 2.92893 15.25 5 15.25C7.07107 15.25 8.75 16.9289 8.75 19C8.75 21.0711 7.07107 22.75 5 22.75C2.92893 22.75 1.25 21.0711 1.25 19Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.25 10C5.25 7.82447 7.26544 6.25 9.5 6.25H11C11.4142 6.25 11.75 6.58579 11.75 7C11.75 7.41421 11.4142 7.75 11 7.75H9.5C7.86856 7.75 6.75 8.86153 6.75 10C6.75 11.1385 7.86856 12.25 9.5 12.25H12.5C14.7346 12.25 16.75 13.8245 16.75 16C16.75 18.1755 14.7346 19.75 12.5 19.75H11C10.5858 19.75 10.25 19.4142 10.25 19C10.25 18.5858 10.5858 18.25 11 18.25H12.5C14.1314 18.25 15.25 17.1385 15.25 16C15.25 14.8615 14.1314 13.75 12.5 13.75H9.5C7.26544 13.75 5.25 12.1755 5.25 10Z" fill="currentcolor"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.6514 6.94697C19.2085 5.90883 19.5 5.03145 19.5 4.42859C19.5 3.08559 18.343 1.92859 17 1.92859C15.657 1.92859 14.5 3.08559 14.5 4.42859C14.5 5.03145 14.7915 5.90883 15.3486 6.94697C15.8419 7.8662 16.4616 8.76371 17 9.47757C17.5384 8.7637 18.1581 7.8662 18.6514 6.94697ZM21 4.42859C21 6.39818 19.2425 9.02055 18.0575 10.5649C17.5142 11.273 16.4858 11.273 15.9425 10.5649C14.7575 9.02055 13 6.39818 13 4.42859C13 2.25716 14.8286 0.428589 17 0.428589C19.1714 0.428589 21 2.25716 21 4.42859Z" fill="currentcolor"/>
<path d="M18.0515 4.54288C18.0515 4.01788 17.5265 3.49288 17.0015 3.49288C16.4765 3.49288 15.9515 3.93038 15.9515 4.54288C15.9515 5.06788 16.389 5.59288 17.0015 5.59288C17.614 5.59288 18.139 5.06788 18.0515 4.54288Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq/popular-routes"
                      ],
                      [
                        "تصنيف الطيران",
                        "Airlines Leaderboard",
                        `<svg width="100%" height="100%" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M13.9383 18.3977C13.5049 18.4561 13.3703 18.5502 13.2954 18.6255L13.293 18.6279C13.2169 18.7038 13.1227 18.8393 13.0644 19.2727C13.0021 19.7349 13 20.3624 13 21.3334V22.4884C13 22.5277 13 22.5672 13 22.607C13 22.6268 13 22.6467 13 22.6667V28.3334H19L19 25.2737C19 25.2337 19 25.194 19 25.1545V21.3334C19 20.3624 18.9979 19.7349 18.9356 19.2727C18.8773 18.8393 18.7831 18.7038 18.707 18.6279L18.7054 18.6263C18.6294 18.5501 18.4941 18.4561 18.0611 18.3977C17.5991 18.3355 16.9717 18.3334 16 18.3334C15.0283 18.3334 14.4005 18.3355 13.9383 18.3977ZM21 25.3334V28.3334H26.3333V26.6667C26.3333 25.6957 26.3312 25.0682 26.2689 24.606C26.2106 24.1727 26.1164 24.0372 26.0404 23.9613L26.0388 23.9597C25.9629 23.8836 25.8273 23.7894 25.394 23.7311C24.9318 23.6688 24.3043 23.6667 23.3333 23.6667H22.6667C22.0097 23.6667 21.6178 23.6688 21.337 23.7066C21.2083 23.7239 21.1439 23.7443 21.1149 23.7562C21.1082 23.759 21.1038 23.7611 21.1012 23.7625L21.0978 23.7644L21.0958 23.7679C21.0944 23.7705 21.0923 23.7749 21.0895 23.7816C21.0776 23.8106 21.0572 23.875 21.0399 24.0037C21.0021 24.2845 21 24.6764 21 25.3334ZM28.3333 28.3334V26.6008C28.3334 25.7145 28.3334 24.9507 28.251 24.3391C28.1628 23.6839 27.9639 23.0558 27.4541 22.5466C26.9448 22.0363 26.3164 21.8373 25.661 21.749C25.0493 21.6666 24.2855 21.6666 23.3992 21.6667L22.6069 21.6667C22.0298 21.6666 21.5007 21.6666 21.0703 21.7245C21.047 21.7276 21.0235 21.731 21 21.7345L21 21.2674C21 20.3812 21.0001 19.6174 20.9177 19.0057C20.8295 18.3504 20.6304 17.7222 20.1204 17.2129C19.6113 16.7031 18.9836 16.5039 18.3282 16.4156C17.7167 16.3333 16.9529 16.3333 16.066 16.3334H15.934C15.0471 16.3333 14.283 16.3333 13.6714 16.4156C13.0168 16.5038 12.389 16.7025 11.8804 17.2121C11.3698 17.7216 11.1706 18.35 11.0823 19.0057C11.079 19.0301 11.0758 19.0548 11.0728 19.0797C11.0249 19.0714 10.9771 19.0642 10.9297 19.0578C10.4993 18.9999 9.97021 19 9.39305 19C9.3732 19 9.35329 19 9.33333 19H8.66666C8.64459 19 8.62259 19 8.60066 19C7.7138 19 6.94967 18.9999 6.33802 19.0823C5.68294 19.1705 5.05464 19.3695 4.54581 19.88C4.03611 20.3892 3.83718 21.0172 3.74894 21.6724C3.66657 22.284 3.66661 23.0478 3.66666 23.9341C3.66666 23.956 3.66666 23.978 3.66666 24V28.3334H2.66666C2.11438 28.3334 1.66666 28.7811 1.66666 29.3334C1.66666 29.8856 2.11438 30.3334 2.66666 30.3334H29.3333C29.8856 30.3334 30.3333 29.8856 30.3333 29.3334C30.3333 28.7811 29.8856 28.3334 29.3333 28.3334H28.3333ZM5.66666 28.3334H11V22.6667C11 22.0097 10.9979 21.6179 10.9601 21.337C10.9428 21.2084 10.9224 21.144 10.9105 21.115C10.9077 21.1083 10.9055 21.1038 10.9042 21.1013L10.9023 21.0978L10.8988 21.0958C10.8962 21.0945 10.8918 21.0923 10.885 21.0896C10.8561 21.0776 10.7917 21.0572 10.663 21.0399C10.3822 21.0022 9.99029 21 9.33333 21H8.66666C7.69498 21 7.0672 21.0022 6.60497 21.0644C6.17157 21.1228 6.037 21.2169 5.96205 21.2922L5.95963 21.2946C5.88356 21.3705 5.78941 21.506 5.73105 21.9393C5.6688 22.4016 5.66666 23.029 5.66666 24V28.3334Z" fill="currentcolor"/>
<path d="M26.6375 4.98632C26.698 4.73816 26.6636 4.47634 26.5409 4.25227C26.2279 3.70911 25.8107 3.23311 25.3133 2.85158C24.8159 2.47004 24.248 2.19049 23.6422 2.02897C23.0365 1.86744 22.4048 1.82711 21.7835 1.91029C21.1621 1.99348 20.5633 2.19855 20.0214 2.51372L17.9448 3.71139L13.1155 1.44162C12.9782 1.37049 12.8258 1.33336 12.6712 1.33336C12.5166 1.33336 12.3642 1.37049 12.2269 1.44162L9.32932 3.11255C9.18612 3.19516 9.06652 3.31313 8.98196 3.45518C8.89741 3.59724 8.85073 3.75862 8.84639 3.92388C8.84172 4.09036 8.88017 4.25523 8.95802 4.40246C9.03587 4.5497 9.15047 4.6743 9.29069 4.76417L12.478 6.77316L10.7974 7.73902L6.18062 8.29922C5.99503 8.32218 5.82009 8.39852 5.67704 8.51898C5.534 8.63944 5.429 8.79884 5.37479 8.97782C5.32059 9.1568 5.31951 9.34766 5.37168 9.52725C5.42386 9.70683 5.52704 9.8674 5.66871 9.98948L9.08786 12.945C9.53799 13.3746 10.1145 13.6479 10.732 13.7244C11.3495 13.801 11.9753 13.6767 12.5167 13.37L26.1546 5.5755C26.2708 5.51516 26.3736 5.43182 26.4566 5.33053C26.5396 5.22925 26.6012 5.11214 26.6375 4.98632ZM11.6377 11.7473C11.4522 11.8494 11.2383 11.8877 11.0288 11.8563C10.8194 11.8249 10.6261 11.7255 10.4787 11.5735L8.64356 9.99914L11.2804 9.6804C11.4099 9.6638 11.5348 9.62108 11.6474 9.55484L14.8927 7.69073C15.0373 7.60729 15.1577 7.48779 15.2424 7.34391C15.327 7.20002 15.3729 7.03666 15.3756 6.86975C15.3776 6.70398 15.3369 6.54048 15.2574 6.39501C15.1779 6.24953 15.0622 6.12696 14.9216 6.03911L11.7343 4.02046L12.7968 3.41197L17.6261 5.65277C17.7634 5.7239 17.9157 5.76102 18.0704 5.76102C18.225 5.76102 18.3773 5.7239 18.5146 5.65277L20.9872 4.22329C21.4939 3.93933 22.0743 3.81421 22.653 3.86415C23.2317 3.9141 23.782 4.13681 24.2325 4.50339L11.6377 11.7473Z" fill="currentcolor"/>
</svg>`,
                        "https://sindibad.iq/airlines-leaderboard"
                      ]
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___148Qz
                    )}
                    component={Link}
                    href={(() => {
                      try {
                        return currentItem[3];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "https://sindibad.iq";
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (window.location.href = currentItem[3]);
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <ListListItem
                      className={classNames(
                        "__wab_instance",
                        sty.listListItem__kCanl,
                        {
                          [sty.listListItemopen__kCanlRzV0Y]: hasVariant(
                            $state,
                            "open",
                            "open"
                          )
                        }
                      )}
                      dir={args.dir}
                      icon={(() => {
                        try {
                          return currentItem[2];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      text={(() => {
                        try {
                          return currentItem[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "item";
                          }
                          throw e;
                        }
                      })()}
                    />
                  </PlasmicLink__>
                );
              })}
            </ButtonDrop>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fHkoa, {
              [sty.freeBoxheaderType_appHeader__fHkoaQjU8]: hasVariant(
                $state,
                "headerType",
                "appHeader"
              ),
              [sty.freeBoxheaderType_appHeader_open__fHkoaQjU8RzV0Y]:
                hasVariant($state, "open", "open") &&
                hasVariant($state, "headerType", "appHeader"),
              [sty.freeBoxopen__fHkoaRzV0Y]: hasVariant($state, "open", "open")
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___19Snj)}
            >
              <ButtonButton
                color={"themeSecondary"}
                direction={args.dir}
                link={"https://assistant.sindibad.iq"}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (window.location.href =
                              "https://assistant.sindibad.iq");
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                showStartIcon={true}
                startIcon={
                  '<svg width="auto" height="auto" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M18.72 14.76C19.07 13.91 19.26 13 19.26 12C19.26 11.28 19.15 10.59 18.96 9.95001C18.31 10.1 17.63 10.18 16.92 10.18C15.466 10.1816 14.0329 9.83353 12.7415 9.16523C11.4502 8.49693 10.3384 7.52796 9.5 6.34001C8.6031 8.51018 6.91112 10.2558 4.77 11.22C4.73 11.47 4.73 11.74 4.73 12C4.73 12.9547 4.91804 13.9001 5.2834 14.7821C5.64875 15.6642 6.18425 16.4656 6.85933 17.1407C8.22272 18.5041 10.0719 19.27 12 19.27C13.05 19.27 14.06 19.04 14.97 18.63C15.54 19.72 15.8 20.26 15.78 20.26C14.14 20.81 12.87 21.08 12 21.08C9.58 21.08 7.27 20.13 5.57 18.42C4.536 17.3892 3.76737 16.123 3.33 14.73H2V10.18H3.09C3.42024 8.57252 4.17949 7.08442 5.28719 5.8736C6.39489 4.66278 7.80971 3.77441 9.38153 3.30277C10.9534 2.83112 12.6235 2.79378 14.2149 3.19471C15.8062 3.59565 17.2593 4.4199 18.42 5.58001C19.6802 6.83526 20.5398 8.43611 20.89 10.18H22V14.73H21.94L18.38 18L13.08 17.4V15.73H17.91L18.72 14.76ZM9.27 11.77C9.57 11.77 9.86 11.89 10.07 12.11C10.281 12.3228 10.3995 12.6103 10.3995 12.91C10.3995 13.2097 10.281 13.4972 10.07 13.71C9.86 13.92 9.57 14.04 9.27 14.04C8.64 14.04 8.13 13.54 8.13 12.91C8.13 12.28 8.64 11.77 9.27 11.77ZM14.72 11.77C15.35 11.77 15.85 12.28 15.85 12.91C15.85 13.54 15.35 14.04 14.72 14.04C14.09 14.04 13.58 13.54 13.58 12.91C13.58 12.6077 13.7001 12.3177 13.9139 12.1039C14.1277 11.8901 14.4177 11.77 14.72 11.77Z" fill="currentcolor"/></svg>'
                }
                text={"\u062a\u0648\u0627\u0635\u0644 \u0645\u0639\u0646\u0627"}
                type={"link"}
              />
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </header>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  headerBase: ["headerBase", "contentContainer", "brandingSindibadLogotype"],
  contentContainer: ["contentContainer", "brandingSindibadLogotype"],
  brandingSindibadLogotype: ["brandingSindibadLogotype"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  headerBase: "header";
  contentContainer: "div";
  brandingSindibadLogotype: typeof BrandingSindibadLogotype;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBasicHeaderMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBasicHeaderMain__VariantsArgs;
    args?: PlasmicBasicHeaderMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBasicHeaderMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBasicHeaderMain__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBasicHeaderMain__ArgProps,
          internalVariantPropNames: PlasmicBasicHeaderMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBasicHeaderMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "headerBase") {
    func.displayName = "PlasmicBasicHeaderMain";
  } else {
    func.displayName = `PlasmicBasicHeaderMain.${nodeName}`;
  }
  return func;
}

export const PlasmicBasicHeaderMain = Object.assign(
  // Top-level PlasmicBasicHeaderMain renders the root element
  makeNodeComponent("headerBase"),
  {
    // Helper components rendering sub-elements
    contentContainer: makeNodeComponent("contentContainer"),
    brandingSindibadLogotype: makeNodeComponent("brandingSindibadLogotype"),

    // Metadata about props expected for PlasmicBasicHeaderMain
    internalVariantProps: PlasmicBasicHeaderMain__VariantProps,
    internalArgProps: PlasmicBasicHeaderMain__ArgProps
  }
);

export default PlasmicBasicHeaderMain;
/* prettier-ignore-end */
