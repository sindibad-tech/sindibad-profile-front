// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p1fHvJbiLdgzRrAS359KQb
// Component: bLLuP-g3TByg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonButton from "../../ButtonButton"; // plasmic-import: 99pKO0LKqxZl/component

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import sty from "./PlasmicCardRoute.module.css"; // plasmic-import: bLLuP-g3TByg/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: YWfRW32G58V0/icon

createPlasmicElementProxy;

export type PlasmicCardRoute__VariantMembers = {
  cityBased: "cityBased";
};
export type PlasmicCardRoute__VariantsArgs = {
  cityBased?: SingleBooleanChoiceArg<"cityBased">;
};
type VariantPropType = keyof PlasmicCardRoute__VariantsArgs;
export const PlasmicCardRoute__VariantProps = new Array<VariantPropType>(
  "cityBased"
);

export type PlasmicCardRoute__ArgsType = {
  dir?: string;
  originAirport?: string;
  originIata?: string;
  originCity?: string;
  originCountryFlag?: string;
  destinationAirport?: string;
  destinationIata?: string;
  destintaionCity?: string;
  destinationCountryFlag?: string;
  buttonText?: string;
  originDelay?: number;
  destinationDelay?: number;
  originAirportSlug?: string;
  destinationAirportSlug?: string;
  originCitySlug?: string;
  destinationCitySlug?: string;
};
type ArgPropType = keyof PlasmicCardRoute__ArgsType;
export const PlasmicCardRoute__ArgProps = new Array<ArgPropType>(
  "dir",
  "originAirport",
  "originIata",
  "originCity",
  "originCountryFlag",
  "destinationAirport",
  "destinationIata",
  "destintaionCity",
  "destinationCountryFlag",
  "buttonText",
  "originDelay",
  "destinationDelay",
  "originAirportSlug",
  "destinationAirportSlug",
  "originCitySlug",
  "destinationCitySlug"
);

export type PlasmicCardRoute__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  buttonButton?: Flex__<typeof ButtonButton>;
};

export interface DefaultCardRouteProps {
  dir?: string;
  originAirport?: string;
  originIata?: string;
  originCity?: string;
  originCountryFlag?: string;
  destinationAirport?: string;
  destinationIata?: string;
  destintaionCity?: string;
  destinationCountryFlag?: string;
  buttonText?: string;
  originDelay?: number;
  destinationDelay?: number;
  originAirportSlug?: string;
  destinationAirportSlug?: string;
  originCitySlug?: string;
  destinationCitySlug?: string;
  cityBased?: SingleBooleanChoiceArg<"cityBased">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCardRoute__RenderFunc(props: {
  variants: PlasmicCardRoute__VariantsArgs;
  args: PlasmicCardRoute__ArgsType;
  overrides: PlasmicCardRoute__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          dir: "rtl",
          buttonText:
            "\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u0645\u0633\u0627\u0631"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "cityBased",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.cityBased
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootcityBased]: hasVariant($state, "cityBased", "cityBased") }
      )}
      dir={args.dir}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rFsBa)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pMjQq)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uQaze)}
          >
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__kVce2,
                {
                  [sty.linkcityBased__kVce26E5D6]: hasVariant(
                    $state,
                    "cityBased",
                    "cityBased"
                  )
                }
              )}
              component={Link}
              href={(() => {
                try {
                  return `https://sindibad.iq/airports/${$props.originAirportSlug}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.location.href = `https://sindibad.iq/airports/${$props.originAirportSlug}`);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vUoV
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.originAirport;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rddMu
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.originIata;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__d8Gnv
              )}
              component={Link}
              href={(() => {
                try {
                  return `https://sindibad.iq/flight/${$props.originCitySlug}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.location.href = `https://sindibad.iq/flight/${$props.originCitySlug}`);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              platform={"nextjs"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__xBh9N)}
                displayHeight={"24px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"32px"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $props.originCountryFlag;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ujjNi,
                  {
                    [sty.textcityBased__ujjNi6E5D6]: hasVariant(
                      $state,
                      "cityBased",
                      "cityBased"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.originCity;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__iiKgc)}>
            <div className={classNames(projectcss.all, sty.freeBox__ru3Sm)}>
              <div
                className={classNames(projectcss.all, sty.freeBox___8Wgfe)}
              />
            </div>
            <Icon15Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dL3Xv)}
          >
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__ac6Xz,
                {
                  [sty.linkcityBased__ac6Xz6E5D6]: hasVariant(
                    $state,
                    "cityBased",
                    "cityBased"
                  )
                }
              )}
              component={Link}
              href={(() => {
                try {
                  return `https://sindibad.iq/airports/${$props.originAirportSlug}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.location.href = `https://sindibad.iq/airports/${$props.originAirportSlug}`);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__toN1C
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.destinationAirport;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lXNjO
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.destinationIata;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__wVupe
              )}
              component={Link}
              href={(() => {
                try {
                  return `https://sindibad.iq/flight/${$props.destinationCitySlug}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.location.href = `https://sindibad.iq/flight/${$props.destinationCitySlug}`);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              platform={"nextjs"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__zm5HS)}
                displayHeight={"24px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"32px"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $props.destinationCountryFlag;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gcV3,
                  {
                    [sty.textcityBased__gcV36E5D6]: hasVariant(
                      $state,
                      "cityBased",
                      "cityBased"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.destintaionCity;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          </Stack__>
        </Stack__>
        {(
          hasVariant($state, "cityBased", "cityBased")
            ? true
            : (() => {
                try {
                  return $props.destinationDelay != null &&
                    $props.destinationDelay != undefined &&
                    $props.originDelay != null &&
                    $props.originDelay != undefined
                    ? $props.originDelay != 0 || $props.destinationDelay != 0
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
        ) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iL8S2, {
              [sty.freeBoxcityBased__iL8S26E5D6]: hasVariant(
                $state,
                "cityBased",
                "cityBased"
              )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fs07)}
            >
              {(() => {
                try {
                  return $props.originDelay != null &&
                    $props.originDelay != undefined
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___38B2K)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dJaRb
                    )}
                  >
                    {
                      "\u0645\u062a\u0648\u0633\u0637 \u200b\u200b\u062a\u0623\u062e\u064a\u0631 \u0627\u0644\u0645\u063a\u0627\u062f\u0631\u0629"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dzqrG
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `${$props.originDelay} دقائق`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              ) : null}
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__hraT)} />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__voHvi)}
            >
              {(() => {
                try {
                  return $props.destinationDelay != null &&
                    $props.destinationDelay != undefined
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wJa5S, {
                    [sty.freeBoxcityBased__wJa5S6E5D6]: hasVariant(
                      $state,
                      "cityBased",
                      "cityBased"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fRq67
                    )}
                  >
                    {
                      "\u0645\u062a\u0648\u0633\u0637 \u200b\u200b\u062a\u0623\u062e\u064a\u0631 \u0627\u0644\u0648\u0635\u0648\u0644"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d5Uv3
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `${$props.destinationDelay} دقائق`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062f\u0642\u0627\u0626\u0642 ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              ) : null}
            </Stack__>
          </Stack__>
        ) : null}
      </Stack__>
      <ButtonButton
        data-plasmic-name={"buttonButton"}
        data-plasmic-override={overrides.buttonButton}
        link={(() => {
          try {
            return `https://sindibad.iq/flight/from-${$props.originAirport}-to-${$props.destinationAirport}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}
        onClick={async event => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      return (window.location.href = `https://sindibad.iq/flight/from-${$props.originAirport}-to-${$props.destinationAirport}`);
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
        text={(() => {
          try {
            return $props.buttonText;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        type={"outline"}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "buttonButton"],
  svg: ["svg"],
  buttonButton: ["buttonButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  buttonButton: typeof ButtonButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardRoute__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardRoute__VariantsArgs;
    args?: PlasmicCardRoute__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardRoute__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardRoute__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCardRoute__ArgProps,
          internalVariantPropNames: PlasmicCardRoute__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardRoute__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardRoute";
  } else {
    func.displayName = `PlasmicCardRoute.${nodeName}`;
  }
  return func;
}

export const PlasmicCardRoute = Object.assign(
  // Top-level PlasmicCardRoute renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    buttonButton: makeNodeComponent("buttonButton"),

    // Metadata about props expected for PlasmicCardRoute
    internalVariantProps: PlasmicCardRoute__VariantProps,
    internalArgProps: PlasmicCardRoute__ArgProps
  }
);

export default PlasmicCardRoute;
/* prettier-ignore-end */
