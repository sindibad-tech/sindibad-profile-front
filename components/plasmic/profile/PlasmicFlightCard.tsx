// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: TXwglw5LPRdv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicFlightCard.module.css"; // plasmic-import: TXwglw5LPRdv/css

import AirplanePlaneFlightSvgrepoComSvgIcon from "./icons/PlasmicIcon__AirplanePlaneFlightSvgrepoComSvg"; // plasmic-import: Pd4zaT4q7XG6/icon
import EarthGlobeInternetSvgrepoComSvgIcon from "./icons/PlasmicIcon__EarthGlobeInternetSvgrepoComSvg"; // plasmic-import: tnwTMdzph0Bo/icon

createPlasmicElementProxy;

export type PlasmicFlightCard__VariantMembers = {};
export type PlasmicFlightCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicFlightCard__VariantsArgs;
export const PlasmicFlightCard__VariantProps = new Array<VariantPropType>();

export type PlasmicFlightCard__ArgsType = {
  flights?: number;
  countries?: number;
  cities?: number;
  airport?: number;
  hours?: number;
  distance2?: string;
};
type ArgPropType = keyof PlasmicFlightCard__ArgsType;
export const PlasmicFlightCard__ArgProps = new Array<ArgPropType>(
  "flights",
  "countries",
  "cities",
  "airport",
  "hours",
  "distance2"
);

export type PlasmicFlightCard__OverridesType = {
  root?: Flex__<"div">;
  icon1?: Flex__<"section">;
  dataFlight?: Flex__<"section">;
  flight1?: Flex__<"div">;
  distance?: Flex__<"section">;
  dataDistance?: Flex__<"section">;
  text?: Flex__<"div">;
};

export interface DefaultFlightCardProps {
  flights?: number;
  countries?: number;
  cities?: number;
  airport?: number;
  hours?: number;
  distance2?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFlightCard__RenderFunc(props: {
  variants: PlasmicFlightCard__VariantsArgs;
  args: PlasmicFlightCard__ArgsType;
  overrides: PlasmicFlightCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__t5AI6)}>
        <div className={classNames(projectcss.all, sty.freeBox___91PqT)}>
          <section
            data-plasmic-name={"icon1"}
            data-plasmic-override={overrides.icon1}
            className={classNames(projectcss.all, sty.icon1)}
          >
            <AirplanePlaneFlightSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__oSpx)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__aPvD)}>
              <section
                data-plasmic-name={"dataFlight"}
                data-plasmic-override={overrides.dataFlight}
                className={classNames(projectcss.all, sty.dataFlight)}
              >
                <div
                  data-plasmic-name={"flight1"}
                  data-plasmic-override={overrides.flight1}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.flight1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Flight: " + $props.flights;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </section>
            </div>
          </section>
          <section
            data-plasmic-name={"distance"}
            data-plasmic-override={overrides.distance}
            className={classNames(projectcss.all, sty.distance)}
          >
            <EarthGlobeInternetSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg___70BcS)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__d5Zla)}>
              <section
                data-plasmic-name={"dataDistance"}
                data-plasmic-override={overrides.dataDistance}
                className={classNames(projectcss.all, sty.dataDistance)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Distanve Around the world: " + $props.flights;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </section>
            </div>
          </section>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__lYdhs)} />

      <div className={classNames(projectcss.all, sty.freeBox__ftnxc)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "icon1",
    "dataFlight",
    "flight1",
    "distance",
    "dataDistance",
    "text"
  ],
  icon1: ["icon1", "dataFlight", "flight1"],
  dataFlight: ["dataFlight", "flight1"],
  flight1: ["flight1"],
  distance: ["distance", "dataDistance", "text"],
  dataDistance: ["dataDistance", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  icon1: "section";
  dataFlight: "section";
  flight1: "div";
  distance: "section";
  dataDistance: "section";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFlightCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFlightCard__VariantsArgs;
    args?: PlasmicFlightCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFlightCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFlightCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFlightCard__ArgProps,
          internalVariantPropNames: PlasmicFlightCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFlightCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFlightCard";
  } else {
    func.displayName = `PlasmicFlightCard.${nodeName}`;
  }
  return func;
}

export const PlasmicFlightCard = Object.assign(
  // Top-level PlasmicFlightCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    icon1: makeNodeComponent("icon1"),
    dataFlight: makeNodeComponent("dataFlight"),
    flight1: makeNodeComponent("flight1"),
    distance: makeNodeComponent("distance"),
    dataDistance: makeNodeComponent("dataDistance"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicFlightCard
    internalVariantProps: PlasmicFlightCard__VariantProps,
    internalArgProps: PlasmicFlightCard__ArgProps
  }
);

export default PlasmicFlightCard;
/* prettier-ignore-end */
