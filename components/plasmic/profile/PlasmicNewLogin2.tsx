/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: o3TZKPri98fH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicNewLogin2.module.css"; // plasmic-import: o3TZKPri98fH/css

createPlasmicElementProxy;

export type PlasmicNewLogin2__VariantMembers = {};
export type PlasmicNewLogin2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewLogin2__VariantsArgs;
export const PlasmicNewLogin2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewLogin2__ArgsType = { language?: string };
type ArgPropType = keyof PlasmicNewLogin2__ArgsType;
export const PlasmicNewLogin2__ArgProps = new Array<ArgPropType>("language");

export type PlasmicNewLogin2__OverridesType = {
  root?: Flex__<"div">;
  duration2?: Flex__<"section">;
  days3?: Flex__<"div">;
  hours4?: Flex__<"div">;
  minutes3?: Flex__<"div">;
  image?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultNewLogin2Props {
  language?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewLogin2__RenderFunc(props: {
  variants: PlasmicNewLogin2__VariantsArgs;
  args: PlasmicNewLogin2__ArgsType;
  overrides: PlasmicNewLogin2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          language: (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return '""';
              }
              throw e;
            }
          })()
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    (() => {
      try {
        return true;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_library_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
        dr={(() => {
          try {
            return $props.language === "ar" ? "rtl" : "ltr";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <section
          data-plasmic-name={"duration2"}
          data-plasmic-override={overrides.duration2}
          className={classNames(projectcss.all, sty.duration2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__o9S9
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.language === "ar"
                    ? "مدة الوقت في الطيران"
                    : "Time Spent Flying";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7N1BL)}>
            <div
              data-plasmic-name={"days3"}
              data-plasmic-override={overrides.days3}
              className={classNames(projectcss.all, sty.days3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vsDw
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "0";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__spE9
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.language === "ar" ? "أيام" : "Days";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"hours4"}
              data-plasmic-override={overrides.hours4}
              className={classNames(projectcss.all, sty.hours4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Lt
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "0";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lOpbL
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.language === "ar" ? "ساعات" : "Hours";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div
              data-plasmic-name={"minutes3"}
              data-plasmic-override={overrides.minutes3}
              className={classNames(projectcss.all, sty.minutes3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zWNsu
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "0";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lskOg
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.language === "ar" ? "دقائق" : "Minutes";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </div>
        </section>
        {(() => {
          try {
            return $ctx.fetchedData.result.flights === 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <section
            data-plasmic-name={"image"}
            data-plasmic-override={overrides.image}
            className={classNames(projectcss.all, sty.image)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"70%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/profile/images/img1073Jpg.jpg",
                fullWidth: 1911,
                fullHeight: 955,
                aspectRatio: undefined
              }}
            />
          </section>
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox___5Xakg)}>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={"https://sindibad.iq/auth?step=regin"}
            onClick={async event => {
              const $steps = {};

              $steps["login"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function deleteCookie(name, path = "/", domain) {
                            const expires = "Thu, 01 Jan 1970 00:00:00 GMT";
                            const domainAttribute = domain
                              ? `; domain=${domain}`
                              : "";
                            const pathAttribute = `; path=${path}`;
                            document.cookie = `${name}=; expires=${expires}${pathAttribute}${domainAttribute}`;
                          }
                          try {
                            deleteCookie("aut_token", "/", ".sindibad.iq");
                            console.log("deleting auth cookie");
                          } catch {
                            console.log("No auth cookie");
                          }
                          let name = "external_redirect";
                          let value = "https://profile.sindibad.iq/trip-stats";
                          let path = "/";
                          const domainAttribute = `; domain=.sindibad.iq`;
                          window.document.cookie = `${name}=${window.encodeURIComponent(
                            value
                          )}; path=${path}${domainAttribute}`;
                          return console.log("External redirect set");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["login"] != null &&
                typeof $steps["login"] === "object" &&
                typeof $steps["login"].then === "function"
              ) {
                $steps["login"] = await $steps["login"];
              }
            }}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aNqbY
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar" ? "تسجيل الدخول" : "Login";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "New Request";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </PlasmicLink__>
          {(() => {
            try {
              return $ctx.fetchedData.result.flights === 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v1N8K
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar"
                      ? ".للمتابعة في إحصائيات الرحلة\u060C يرجى تسجيل الدخول أولاً"
                      : "To see your Stats, please login first.";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "duration2",
    "days3",
    "hours4",
    "minutes3",
    "image",
    "img",
    "link"
  ],
  duration2: ["duration2", "days3", "hours4", "minutes3"],
  days3: ["days3"],
  hours4: ["hours4"],
  minutes3: ["minutes3"],
  image: ["image", "img"],
  img: ["img"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  duration2: "section";
  days3: "div";
  hours4: "div";
  minutes3: "div";
  image: "section";
  img: typeof PlasmicImg__;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewLogin2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewLogin2__VariantsArgs;
    args?: PlasmicNewLogin2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewLogin2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewLogin2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewLogin2__ArgProps,
          internalVariantPropNames: PlasmicNewLogin2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewLogin2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewLogin2";
  } else {
    func.displayName = `PlasmicNewLogin2.${nodeName}`;
  }
  return func;
}

export const PlasmicNewLogin2 = Object.assign(
  // Top-level PlasmicNewLogin2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    duration2: makeNodeComponent("duration2"),
    days3: makeNodeComponent("days3"),
    hours4: makeNodeComponent("hours4"),
    minutes3: makeNodeComponent("minutes3"),
    image: makeNodeComponent("image"),
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicNewLogin2
    internalVariantProps: PlasmicNewLogin2__VariantProps,
    internalArgProps: PlasmicNewLogin2__ArgProps
  }
);

export default PlasmicNewLogin2;
/* prettier-ignore-end */
