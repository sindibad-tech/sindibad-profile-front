// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: 6aGTi8PwQvO7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "../library/PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: 6aGTi8PwQvO7/css

import AirplanePlaneFlightSvgrepoComSvgIcon from "./icons/PlasmicIcon__AirplanePlaneFlightSvgrepoComSvg"; // plasmic-import: Pd4zaT4q7XG6/icon
import WatchThinSvgrepoComSvgIcon from "./icons/PlasmicIcon__WatchThinSvgrepoComSvg"; // plasmic-import: __jn_kdFDPwW/icon
import BadshahiMosqueSvgrepoComSvgIcon from "./icons/PlasmicIcon__BadshahiMosqueSvgrepoComSvg"; // plasmic-import: T89ROJGhrPRj/icon
import AirportSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__AirportSvgrepoCom2Svg"; // plasmic-import: -ZavcDLOxXRR/icon

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {
  stateShow: "login" | "logout";
};
export type PlasmicLogin__VariantsArgs = {
  stateShow?: MultiChoiceArg<"login" | "logout">;
};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>(
  "stateShow"
);

export type PlasmicLogin__ArgsType = {
  language?: string;
};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>("language");

export type PlasmicLogin__OverridesType = {
  root?: Flex__<"div">;
  notLogin?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  flight2?: Flex__<"div">;
  flightIcon1?: Flex__<"svg">;
  flights2?: Flex__<"div">;
  hours2?: Flex__<"div">;
  hour2?: Flex__<"svg">;
  city2?: Flex__<"div">;
  cityIcon2?: Flex__<"svg">;
  airport3?: Flex__<"div">;
  airportIcon3?: Flex__<"svg">;
  km2?: Flex__<"div">;
  milesFlown2?: Flex__<"div">;
  country2?: Flex__<"div">;
  login?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultLoginProps {
  language?: string;
  stateShow?: MultiChoiceArg<"login" | "logout">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          language: (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return '""';
              }
              throw e;
            }
          })()
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "stateShow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userstate;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.stateShow
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstateShow_logout]: hasVariant($state, "stateShow", "logout")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"notLogin"}
        data-plasmic-override={overrides.notLogin}
        hasGap={true}
        className={classNames(projectcss.all, sty.notLogin, {
          [sty.notLoginstateShow_login]: hasVariant(
            $state,
            "stateShow",
            "login"
          )
        })}
        dir={(() => {
          try {
            return $props.language === "ar" ? "rtl" : "ltr";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxstateShow_login]: hasVariant(
              $state,
              "stateShow",
              "login"
            ),
            [sty.freeBoxstateShow_logout]: hasVariant(
              $state,
              "stateShow",
              "logout"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"flight2"}
            data-plasmic-override={overrides.flight2}
            hasGap={true}
            className={classNames(projectcss.all, sty.flight2, {
              [sty.flight2stateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.flight2stateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            })}
          >
            <section className={classNames(projectcss.all, sty.section__f8Ssl)}>
              <AirplanePlaneFlightSvgrepoComSvgIcon
                data-plasmic-name={"flightIcon1"}
                data-plasmic-override={overrides.flightIcon1}
                className={classNames(projectcss.all, sty.flightIcon1)}
                role={"img"}
              />
            </section>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z4PBk
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "0";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"flights2"}
              data-plasmic-override={overrides.flights2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.flights2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar" ? "عدد الرحلات" : "Flights";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Flights";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"hours2"}
            data-plasmic-override={overrides.hours2}
            hasGap={true}
            className={classNames(projectcss.all, sty.hours2, {
              [sty.hours2stateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.hours2stateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            })}
          >
            <section className={classNames(projectcss.all, sty.section__nASjK)}>
              <WatchThinSvgrepoComSvgIcon
                data-plasmic-name={"hour2"}
                data-plasmic-override={overrides.hour2}
                className={classNames(projectcss.all, sty.hour2)}
                role={"img"}
              />
            </section>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zrj2R
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "0";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nJDcY
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar"
                      ? "الساعات التي قضيتها في الطيران"
                      : "Hours in the air";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Hours in the Air";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"city2"}
            data-plasmic-override={overrides.city2}
            hasGap={true}
            className={classNames(projectcss.all, sty.city2, {
              [sty.city2stateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.city2stateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            })}
          >
            <section className={classNames(projectcss.all, sty.section__rsUa6)}>
              <BadshahiMosqueSvgrepoComSvgIcon
                data-plasmic-name={"cityIcon2"}
                data-plasmic-override={overrides.cityIcon2}
                className={classNames(projectcss.all, sty.cityIcon2)}
                role={"img"}
              />
            </section>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eTtc8
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "0";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ziqGr
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar"
                      ? "المدن التي زرتها"
                      : "Cities visited";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Cities";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"airport3"}
            data-plasmic-override={overrides.airport3}
            hasGap={true}
            className={classNames(projectcss.all, sty.airport3, {
              [sty.airport3stateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.airport3stateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            })}
          >
            <section className={classNames(projectcss.all, sty.section__sUjj6)}>
              <AirportSvgrepoCom2SvgIcon
                data-plasmic-name={"airportIcon3"}
                data-plasmic-override={overrides.airportIcon3}
                className={classNames(projectcss.all, sty.airportIcon3)}
                role={"img"}
              />
            </section>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fQhVm
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "0";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___44KI0
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar"
                      ? "المطارات التي زرتها "
                      : "Airports Visited";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Airport Visited";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"km2"}
            data-plasmic-override={overrides.km2}
            hasGap={true}
            className={classNames(projectcss.all, sty.km2, {
              [sty.km2stateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.km2stateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iu4Hz
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "0";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"milesFlown2"}
              data-plasmic-override={overrides.milesFlown2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.milesFlown2
              )}
            >
              {"Miles Flown"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"country2"}
            data-plasmic-override={overrides.country2}
            hasGap={true}
            className={classNames(projectcss.all, sty.country2, {
              [sty.country2stateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.country2stateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__epv9D
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "0";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mOgHn
              )}
            >
              {"Countries\n"}
            </div>
          </Stack__>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"login"}
        data-plasmic-override={overrides.login}
        hasGap={true}
        className={classNames(projectcss.all, sty.login, {
          [sty.loginstateShow_login]: hasVariant($state, "stateShow", "login")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__js5CD
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.language === "ar"
                  ? "للمتابعة في إحصائيات الرحلة\u060C يرجى تسجيل الدخول أولاً."
                  : "To continue on Trip Stats, please login first.";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={"https://sindibad.iq/auth?step=regin"}
          onClick={async event => {
            const $steps = {};

            $steps["login"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function deleteCookie(name, path = "/", domain) {
                          const expires = "Thu, 01 Jan 1970 00:00:00 GMT";
                          const domainAttribute = domain
                            ? `; domain=${domain}`
                            : "";
                          const pathAttribute = `; path=${path}`;
                          document.cookie = `${name}=; expires=${expires}${pathAttribute}${domainAttribute}`;
                        }
                        try {
                          deleteCookie("aut_token", "/", ".sindibad.iq");
                          console.log("deleting auth cookie");
                        } catch {
                          console.log("No auth cookie");
                        }
                        let name = "external_redirect";
                        let value = "https://profile.sindibad.iq";
                        let path = "/";
                        const domainAttribute = `; domain=.sindibad.iq`;
                        window.document.cookie = `${name}=${window.encodeURIComponent(
                          value
                        )}; path=${path}${domainAttribute}`;
                        return console.log("External redirect set");
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["login"] != null &&
              typeof $steps["login"] === "object" &&
              typeof $steps["login"].then === "function"
            ) {
              $steps["login"] = await $steps["login"];
            }
          }}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vQazz
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.language === "ar" ? "تسجيل الدخول" : "Login";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "New Request";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </PlasmicLink__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "notLogin",
    "freeBox",
    "flight2",
    "flightIcon1",
    "flights2",
    "hours2",
    "hour2",
    "city2",
    "cityIcon2",
    "airport3",
    "airportIcon3",
    "km2",
    "milesFlown2",
    "country2",
    "login",
    "link"
  ],
  notLogin: [
    "notLogin",
    "freeBox",
    "flight2",
    "flightIcon1",
    "flights2",
    "hours2",
    "hour2",
    "city2",
    "cityIcon2",
    "airport3",
    "airportIcon3",
    "km2",
    "milesFlown2",
    "country2"
  ],
  freeBox: [
    "freeBox",
    "flight2",
    "flightIcon1",
    "flights2",
    "hours2",
    "hour2",
    "city2",
    "cityIcon2",
    "airport3",
    "airportIcon3",
    "km2",
    "milesFlown2",
    "country2"
  ],
  flight2: ["flight2", "flightIcon1", "flights2"],
  flightIcon1: ["flightIcon1"],
  flights2: ["flights2"],
  hours2: ["hours2", "hour2"],
  hour2: ["hour2"],
  city2: ["city2", "cityIcon2"],
  cityIcon2: ["cityIcon2"],
  airport3: ["airport3", "airportIcon3"],
  airportIcon3: ["airportIcon3"],
  km2: ["km2", "milesFlown2"],
  milesFlown2: ["milesFlown2"],
  country2: ["country2"],
  login: ["login", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  notLogin: "div";
  freeBox: "div";
  flight2: "div";
  flightIcon1: "svg";
  flights2: "div";
  hours2: "div";
  hour2: "svg";
  city2: "div";
  cityIcon2: "svg";
  airport3: "div";
  airportIcon3: "svg";
  km2: "div";
  milesFlown2: "div";
  country2: "div";
  login: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    notLogin: makeNodeComponent("notLogin"),
    freeBox: makeNodeComponent("freeBox"),
    flight2: makeNodeComponent("flight2"),
    flightIcon1: makeNodeComponent("flightIcon1"),
    flights2: makeNodeComponent("flights2"),
    hours2: makeNodeComponent("hours2"),
    hour2: makeNodeComponent("hour2"),
    city2: makeNodeComponent("city2"),
    cityIcon2: makeNodeComponent("cityIcon2"),
    airport3: makeNodeComponent("airport3"),
    airportIcon3: makeNodeComponent("airportIcon3"),
    km2: makeNodeComponent("km2"),
    milesFlown2: makeNodeComponent("milesFlown2"),
    country2: makeNodeComponent("country2"),
    login: makeNodeComponent("login"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
