// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: Q1rUTn0MlELo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicLoginRequired.module.css"; // plasmic-import: Q1rUTn0MlELo/css

createPlasmicElementProxy;

export type PlasmicLoginRequired__VariantMembers = {};
export type PlasmicLoginRequired__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoginRequired__VariantsArgs;
export const PlasmicLoginRequired__VariantProps = new Array<VariantPropType>();

export type PlasmicLoginRequired__ArgsType = {
  language?: string;
};
type ArgPropType = keyof PlasmicLoginRequired__ArgsType;
export const PlasmicLoginRequired__ArgProps = new Array<ArgPropType>(
  "language"
);

export type PlasmicLoginRequired__OverridesType = {
  root?: Flex__<"section">;
  freeBox?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultLoginRequiredProps {
  language?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginRequired__RenderFunc(props: {
  variants: PlasmicLoginRequired__VariantsArgs;
  args: PlasmicLoginRequired__ArgsType;
  overrides: PlasmicLoginRequired__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          language: (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          height={"50%"}
          loading={"lazy"}
          src={
            "https://cdn.prod.website-files.com/6612cf855164852602c214c0/66150bea7a7628d7bddf285e_mascot-02%201.png"
          }
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uY5Jb
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.language === "en"
                  ? "To continue on Sindibad Help Center, please login first"
                  : "لمتابعة استخدام مركز المساعدة الخاص بسندباد، يرجى تسجيل الدخول أولاً";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={"https://sindibad.iq/auth?step=regin"}
          onClick={async event => {
            const $steps = {};

            $steps["login"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function deleteCookie(name, path = "/", domain) {
                          const expires = "Thu, 01 Jan 1970 00:00:00 GMT";
                          const domainAttribute = domain
                            ? `; domain=${domain}`
                            : "";
                          const pathAttribute = `; path=${path}`;
                          document.cookie = `${name}=; expires=${expires}${pathAttribute}${domainAttribute}`;
                        }
                        try {
                          deleteCookie("aut_token", "/", ".sindibad.iq");
                          console.log("deleting auth cookie");
                        } catch {
                          console.log("No auth cookie");
                        }
                        let name = "external_redirect";
                        let value = "https://support.sindibad.iq";
                        let path = "/";
                        const domainAttribute = `; domain=.sindibad.iq`;
                        window.document.cookie = `${name}=${window.encodeURIComponent(
                          value
                        )}; path=${path}${domainAttribute}`;
                        return console.log("External redirect set");
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["login"] != null &&
              typeof $steps["login"] === "object" &&
              typeof $steps["login"].then === "function"
            ) {
              $steps["login"] = await $steps["login"];
            }
          }}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__s5Iuu
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.language === "ar" ? "تسجيل الدخول" : "Login";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "New Request";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </PlasmicLink__>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "img", "link"],
  freeBox: ["freeBox", "img", "link"],
  img: ["img"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  freeBox: "div";
  img: typeof PlasmicImg__;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginRequired__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginRequired__VariantsArgs;
    args?: PlasmicLoginRequired__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginRequired__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLoginRequired__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginRequired__ArgProps,
          internalVariantPropNames: PlasmicLoginRequired__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginRequired__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginRequired";
  } else {
    func.displayName = `PlasmicLoginRequired.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginRequired = Object.assign(
  // Top-level PlasmicLoginRequired renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicLoginRequired
    internalVariantProps: PlasmicLoginRequired__VariantProps,
    internalArgProps: PlasmicLoginRequired__ArgProps
  }
);

export default PlasmicLoginRequired;
/* prettier-ignore-end */
