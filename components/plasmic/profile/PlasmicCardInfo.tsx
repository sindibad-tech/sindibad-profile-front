// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: bbKGkJoUqbIZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicCardInfo.module.css"; // plasmic-import: bbKGkJoUqbIZ/css

import AirplanePlaneFlightSvgrepoComSvgIcon from "./icons/PlasmicIcon__AirplanePlaneFlightSvgrepoComSvg"; // plasmic-import: Pd4zaT4q7XG6/icon

createPlasmicElementProxy;

export type PlasmicCardInfo__VariantMembers = {};
export type PlasmicCardInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardInfo__VariantsArgs;
export const PlasmicCardInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicCardInfo__ArgsType = {
  language?: string;
};
type ArgPropType = keyof PlasmicCardInfo__ArgsType;
export const PlasmicCardInfo__ArgProps = new Array<ArgPropType>("language");

export type PlasmicCardInfo__OverridesType = {
  card?: Flex__<"div">;
  flightIcon3?: Flex__<"svg">;
  text?: Flex__<"div">;
  flights4?: Flex__<"div">;
};

export interface DefaultCardInfoProps {
  language?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCardInfo__RenderFunc(props: {
  variants: PlasmicCardInfo__VariantsArgs;
  args: PlasmicCardInfo__ArgsType;
  overrides: PlasmicCardInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          language: (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return '""';
              }
              throw e;
            }
          })()
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.card
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rkl09)}>
        <div className={classNames(projectcss.all, sty.freeBox__dqeat)}>
          <AirplanePlaneFlightSvgrepoComSvgIcon
            data-plasmic-name={"flightIcon3"}
            data-plasmic-override={overrides.flightIcon3}
            className={classNames(projectcss.all, sty.flightIcon3)}
            role={"img"}
          />
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__gS4Cx)}>
        <div className={classNames(projectcss.all, sty.freeBox__u2Cge)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return "0";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__v6JQe)}>
        <div
          data-plasmic-name={"flights4"}
          data-plasmic-override={overrides.flights4}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.flights4
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.language === "ar" ? "عدد الرحلات" : "Flights";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Flights";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  card: ["card", "flightIcon3", "text", "flights4"],
  flightIcon3: ["flightIcon3"],
  text: ["text"],
  flights4: ["flights4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  card: "div";
  flightIcon3: "svg";
  text: "div";
  flights4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardInfo__VariantsArgs;
    args?: PlasmicCardInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardInfo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCardInfo__ArgProps,
          internalVariantPropNames: PlasmicCardInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicCardInfo";
  } else {
    func.displayName = `PlasmicCardInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicCardInfo = Object.assign(
  // Top-level PlasmicCardInfo renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    flightIcon3: makeNodeComponent("flightIcon3"),
    text: makeNodeComponent("text"),
    flights4: makeNodeComponent("flights4"),

    // Metadata about props expected for PlasmicCardInfo
    internalVariantProps: PlasmicCardInfo__VariantProps,
    internalArgProps: PlasmicCardInfo__ArgProps
  }
);

export default PlasmicCardInfo;
/* prettier-ignore-end */
