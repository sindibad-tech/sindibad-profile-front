// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: SEZ-EKiSKUiS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileHeader from "../../ProfileHeader"; // plasmic-import: T35z79qnz4CS/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Button from "../../Button"; // plasmic-import: 1hegvDmx6W9E/component
import NewLogin from "../../NewLogin"; // plasmic-import: kAqzy6eR7N60/component

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "../library/PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: SEZ-EKiSKUiS/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 3m3fsfx9bNC_/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: G8aALch74DHO/icon
import TimeSvgrepoComSvgIcon from "./icons/PlasmicIcon__TimeSvgrepoComSvg"; // plasmic-import: SYGMAPfq55zJ/icon
import AirplanePlaneFlightSvgrepoComSvgIcon from "./icons/PlasmicIcon__AirplanePlaneFlightSvgrepoComSvg"; // plasmic-import: Pd4zaT4q7XG6/icon
import CityHallSvgrepoComSvgIcon from "./icons/PlasmicIcon__CityHallSvgrepoComSvg"; // plasmic-import: NkOv02nCk4wU/icon
import DepartureAirportSvgrepoComSvgIcon from "./icons/PlasmicIcon__DepartureAirportSvgrepoComSvg"; // plasmic-import: BkpnIEzRskj9/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  profileHeader?: Flex__<typeof ProfileHeader>;
  body?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  all2?: Flex__<typeof Button>;
  _2025?: Flex__<typeof Button>;
  _2026?: Flex__<typeof Button>;
  _20234?: Flex__<"div">;
  _2027?: Flex__<typeof Button>;
  loadimg?: Flex__<"section">;
  time3?: Flex__<"div">;
  timeIcon?: Flex__<"svg">;
  flights3?: Flex__<"div">;
  flightIcon4?: Flex__<"svg">;
  cities3?: Flex__<"div">;
  cityIcon4?: Flex__<"svg">;
  airports3?: Flex__<"div">;
  airportIcon5?: Flex__<"svg">;
  newLogin?: Flex__<typeof NewLogin>;
  time2?: Flex__<"div">;
  flightIcon6?: Flex__<"svg">;
  flights2?: Flex__<"div">;
  flightIcon3?: Flex__<"svg">;
  cities2?: Flex__<"div">;
  cityIcon3?: Flex__<"svg">;
  airports2?: Flex__<"div">;
  airportIcon4?: Flex__<"svg">;
  year2?: Flex__<"div">;
  all?: Flex__<typeof Button>;
  _2024?: Flex__<typeof Button>;
  _2023?: Flex__<typeof Button>;
  _20233?: Flex__<"div">;
  _2022?: Flex__<typeof Button>;
  dreamerr?: Flex__<"section">;
  _0Star?: Flex__<"div">;
  newExplorer?: Flex__<"section">;
  _2Star2?: Flex__<"div">;
  adventurousBeginnings?: Flex__<"section">;
  _2Star?: Flex__<"div">;
  frequentVoyager?: Flex__<"section">;
  _3Star?: Flex__<"div">;
  worldExplorer?: Flex__<"section">;
  _4Star?: Flex__<"div">;
  _4SImage?: Flex__<"section">;
  travelMaster?: Flex__<"section">;
  _5Star?: Flex__<"div">;
  starImage?: Flex__<"section">;
  time?: Flex__<"div">;
  flightIcon8?: Flex__<"svg">;
  flights?: Flex__<"div">;
  flightIcon2?: Flex__<"svg">;
  cities?: Flex__<"div">;
  cityIcon2?: Flex__<"svg">;
  airports4?: Flex__<"div">;
  cityIcon5?: Flex__<"svg">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authToken",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.decodeURIComponent(
                ("; " + `${window.document.cookie}`)
                  .split("; auth_token=")
                  .pop()
                  .split(";")
                  .shift()
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return ``;
              }
              throw e;
            }
          })()
      },
      {
        path: "language",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return '""';
              }
              throw e;
            }
          })()
      },
      {
        path: "year",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <ProfileHeader
            data-plasmic-name={"profileHeader"}
            data-plasmic-override={overrides.profileHeader}
            className={classNames("__wab_instance", sty.profileHeader)}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
            dir={(() => {
              try {
                return $state.language === "ar" ? "rtl" : "ltr";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataFetcher
              data-plasmic-name={"httpRestApiFetcher"}
              data-plasmic-override={overrides.httpRestApiFetcher}
              className={classNames("__wab_instance", sty.httpRestApiFetcher)}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <section
                      className={classNames(projectcss.all, sty.section__rUsIq)}
                    >
                      <NewLogin
                        data-plasmic-name={"newLogin"}
                        data-plasmic-override={overrides.newLogin}
                        className={classNames("__wab_instance", sty.newLogin)}
                      />

                      <div
                        data-plasmic-name={"time2"}
                        data-plasmic-override={overrides.time2}
                        className={classNames(projectcss.all, sty.time2)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__knQg
                          )}
                        >
                          <TimeSvgrepoComSvgIcon
                            data-plasmic-name={"flightIcon6"}
                            data-plasmic-override={overrides.flightIcon6}
                            className={classNames(
                              projectcss.all,
                              sty.flightIcon6
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6BX2G
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "ساعات الطيران"
                                    : "Hours Spent Flying";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xOgx3
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"flights2"}
                        data-plasmic-override={overrides.flights2}
                        className={classNames(projectcss.all, sty.flights2)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__izbTe
                          )}
                        >
                          <AirplanePlaneFlightSvgrepoComSvgIcon
                            data-plasmic-name={"flightIcon3"}
                            data-plasmic-override={overrides.flightIcon3}
                            className={classNames(
                              projectcss.all,
                              sty.flightIcon3
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gLkTd
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "عدد الرحلات"
                                    : "Flights";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pbrEf
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"cities2"}
                        data-plasmic-override={overrides.cities2}
                        className={classNames(projectcss.all, sty.cities2)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wtTGe
                          )}
                        >
                          <CityHallSvgrepoComSvgIcon
                            data-plasmic-name={"cityIcon3"}
                            data-plasmic-override={overrides.cityIcon3}
                            className={classNames(
                              projectcss.all,
                              sty.cityIcon3
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rngH
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "المدن التي زرتها"
                                    : "Cities Visited";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qNuy
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"airports2"}
                        data-plasmic-override={overrides.airports2}
                        className={classNames(projectcss.all, sty.airports2)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dzy5X
                          )}
                        >
                          <DepartureAirportSvgrepoComSvgIcon
                            data-plasmic-name={"airportIcon4"}
                            data-plasmic-override={overrides.airportIcon4}
                            className={classNames(
                              projectcss.all,
                              sty.airportIcon4
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___022Le
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "المطارات التي زرتها "
                                    : "Airports Visited";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2Ai4G
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </section>
                  )}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={(() => {
                try {
                  return {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    Authorization: $state.authToken,
                    language: $state.language
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      "Content-Type": "application/json",
                      Accept: "application/json"
                    };
                  }
                  throw e;
                }
              })()}
              loadingDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <section
                      className={classNames(projectcss.all, sty.section__ix173)}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1805
                          )}
                        >
                          <Button
                            data-plasmic-name={"all2"}
                            data-plasmic-override={overrides.all2}
                            className={classNames("__wab_instance", sty.all2)}
                            color={(() => {
                              try {
                                return $state.year === "" ? "blue" : "softBlue";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "blue";
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateYear"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["year"]
                                      },
                                      operation: 0,
                                      value: "2024"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateYear"] != null &&
                                typeof $steps["updateYear"] === "object" &&
                                typeof $steps["updateYear"].then === "function"
                              ) {
                                $steps["updateYear"] = await $steps[
                                  "updateYear"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__seb3J
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.language === "ar"
                                      ? "الكل"
                                      : "All Time";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                          <Button
                            data-plasmic-name={"_2025"}
                            data-plasmic-override={overrides._2025}
                            className={classNames("__wab_instance", sty._2025)}
                            color={(() => {
                              try {
                                return $state.year === "year=2024"
                                  ? "blue"
                                  : "softBlue";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateYear"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["year"]
                                      },
                                      operation: 0,
                                      value: "year=2024"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateYear"] != null &&
                                typeof $steps["updateYear"] === "object" &&
                                typeof $steps["updateYear"].then === "function"
                              ) {
                                $steps["updateYear"] = await $steps[
                                  "updateYear"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mQu1I
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return 2024;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                          <Button
                            data-plasmic-name={"_2026"}
                            data-plasmic-override={overrides._2026}
                            className={classNames("__wab_instance", sty._2026)}
                            color={(() => {
                              try {
                                return $state.year === "year=2023"
                                  ? "blue"
                                  : "softBlue";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateYear"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["year"]
                                      },
                                      operation: 0,
                                      value: "year=2023"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateYear"] != null &&
                                typeof $steps["updateYear"] === "object" &&
                                typeof $steps["updateYear"].then === "function"
                              ) {
                                $steps["updateYear"] = await $steps[
                                  "updateYear"
                                ];
                              }
                            }}
                          >
                            <div
                              data-plasmic-name={"_20234"}
                              data-plasmic-override={overrides._20234}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty._20234
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return 2023;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                          <Button
                            data-plasmic-name={"_2027"}
                            data-plasmic-override={overrides._2027}
                            className={classNames("__wab_instance", sty._2027)}
                            color={(() => {
                              try {
                                return $state.year === "year=2022"
                                  ? "blue"
                                  : "softBlue";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateYear"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["year"]
                                      },
                                      operation: 0,
                                      value: "year=2022"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateYear"] != null &&
                                typeof $steps["updateYear"] === "object" &&
                                typeof $steps["updateYear"].then === "function"
                              ) {
                                $steps["updateYear"] = await $steps[
                                  "updateYear"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jg2Sh
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return 2022;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                        </Stack__>
                      ) : null}
                      <section
                        data-plasmic-name={"loadimg"}
                        data-plasmic-override={overrides.loadimg}
                        className={classNames(projectcss.all, sty.loadimg)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___9Mgzk)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(
                              globalVariants,
                              "screen",
                              "desktopDefault"
                            )
                              ? "100%"
                              : "auto"
                          }
                          loading={"lazy"}
                          src={
                            "https://static.sindibad.iq/upload/Untitled%20design%20(1).gif"
                          }
                        />
                      </section>
                      <div
                        data-plasmic-name={"time3"}
                        data-plasmic-override={overrides.time3}
                        className={classNames(projectcss.all, sty.time3)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v6E8N
                          )}
                        >
                          <TimeSvgrepoComSvgIcon
                            data-plasmic-name={"timeIcon"}
                            data-plasmic-override={overrides.timeIcon}
                            className={classNames(projectcss.all, sty.timeIcon)}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kp060
                            )}
                            unicode-bidi={"isolate"}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "ساعات الطيران"
                                    : "Hours Spent Flying";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eu2Ys
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"flights3"}
                        data-plasmic-override={overrides.flights3}
                        className={classNames(projectcss.all, sty.flights3)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eGiZs
                          )}
                        >
                          <AirplanePlaneFlightSvgrepoComSvgIcon
                            data-plasmic-name={"flightIcon4"}
                            data-plasmic-override={overrides.flightIcon4}
                            className={classNames(
                              projectcss.all,
                              sty.flightIcon4
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vJSzL
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "عدد الرحلات"
                                    : "Flights";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__if46K
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"cities3"}
                        data-plasmic-override={overrides.cities3}
                        className={classNames(projectcss.all, sty.cities3)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lsLdJ
                          )}
                        >
                          <CityHallSvgrepoComSvgIcon
                            data-plasmic-name={"cityIcon4"}
                            data-plasmic-override={overrides.cityIcon4}
                            className={classNames(
                              projectcss.all,
                              sty.cityIcon4
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lPo0W
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "المدن التي زرتها"
                                    : "Cities Visited";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rkWmj
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"airports3"}
                        data-plasmic-override={overrides.airports3}
                        className={classNames(projectcss.all, sty.airports3)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vKgU0
                          )}
                        >
                          <DepartureAirportSvgrepoComSvgIcon
                            data-plasmic-name={"airportIcon5"}
                            data-plasmic-override={overrides.airportIcon5}
                            className={classNames(
                              projectcss.all,
                              sty.airportIcon5
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eUwxQ
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "المطارات التي زرتها "
                                    : "Airports Visited";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fxyAk
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "-";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </section>
                  )}
                </DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              previewErrorDisplay={
                hasVariant(globalVariants, "screen", "desktopDefault")
                  ? false
                  : false
              }
              previewSpinner={false}
              url={(() => {
                try {
                  return (
                    "https://api.sindibad.iq/api/v1.0/international-flight/Order/mytrips-stat?" +
                    $state.year
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "https://api.sindibad.iq/api/v1.0/international-flight/Order/mytrips-stat";
                  }
                  throw e;
                }
              })()}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t6Nfa)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"year2"}
                      data-plasmic-override={overrides.year2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.year2)}
                    >
                      <Button
                        data-plasmic-name={"all"}
                        data-plasmic-override={overrides.all}
                        className={classNames("__wab_instance", sty.all)}
                        color={(() => {
                          try {
                            return $state.year === "" ? "blue" : "softBlue";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "blue";
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateYear"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["year"]
                                  },
                                  operation: 0,
                                  value: "2024"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateYear"] != null &&
                            typeof $steps["updateYear"] === "object" &&
                            typeof $steps["updateYear"].then === "function"
                          ) {
                            $steps["updateYear"] = await $steps["updateYear"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cYmu
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "الكل"
                                  : "All Time";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"_2024"}
                        data-plasmic-override={overrides._2024}
                        className={classNames("__wab_instance", sty._2024)}
                        color={(() => {
                          try {
                            return $state.year === "year=2024"
                              ? "blue"
                              : "softBlue";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateYear"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["year"]
                                  },
                                  operation: 0,
                                  value: "year=2024"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateYear"] != null &&
                            typeof $steps["updateYear"] === "object" &&
                            typeof $steps["updateYear"].then === "function"
                          ) {
                            $steps["updateYear"] = await $steps["updateYear"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x540R
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return 2024;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"_2023"}
                        data-plasmic-override={overrides._2023}
                        className={classNames("__wab_instance", sty._2023)}
                        color={(() => {
                          try {
                            return $state.year === "year=2023"
                              ? "blue"
                              : "softBlue";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateYear"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["year"]
                                  },
                                  operation: 0,
                                  value: "year=2023"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateYear"] != null &&
                            typeof $steps["updateYear"] === "object" &&
                            typeof $steps["updateYear"].then === "function"
                          ) {
                            $steps["updateYear"] = await $steps["updateYear"];
                          }
                        }}
                      >
                        <div
                          data-plasmic-name={"_20233"}
                          data-plasmic-override={overrides._20233}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty._20233
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return 2023;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"_2022"}
                        data-plasmic-override={overrides._2022}
                        className={classNames("__wab_instance", sty._2022)}
                        color={(() => {
                          try {
                            return $state.year === "year=2022"
                              ? "blue"
                              : "softBlue";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateYear"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["year"]
                                  },
                                  operation: 0,
                                  value: "year=2022"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateYear"] != null &&
                            typeof $steps["updateYear"] === "object" &&
                            typeof $steps["updateYear"].then === "function"
                          ) {
                            $steps["updateYear"] = await $steps["updateYear"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xFmYe
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return 2022;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                    </Stack__>
                    <section
                      className={classNames(projectcss.all, sty.section__wvP09)}
                      id={"app-box"}
                    >
                      {(() => {
                        try {
                          return $ctx.fetchedData.result.flights === 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"dreamerr"}
                          data-plasmic-override={overrides.dreamerr}
                          className={classNames(projectcss.all, sty.dreamerr)}
                        >
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.flights === 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"_0Star"}
                              data-plasmic-override={overrides._0Star}
                              className={classNames(projectcss.all, sty._0Star)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__whwh3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jsbgh
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "الحالم"
                                          : "Dreamer";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__nip8U
                                  )}
                                />
                              </div>
                              <section
                                className={classNames(
                                  projectcss.all,
                                  sty.section__ley5
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__rveEh)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/profile/images/_15128Jpg5.jpg",
                                    fullWidth: 1230,
                                    fullHeight: 148,
                                    aspectRatio: undefined
                                  }}
                                />
                              </section>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.flights === 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__cKff9)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1735384423270Jpg.jpg",
                                fullWidth: 1922,
                                fullHeight: 960,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange = product > 0 && product < 4;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"newExplorer"}
                          data-plasmic-override={overrides.newExplorer}
                          className={classNames(
                            projectcss.all,
                            sty.newExplorer
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product > 0 && product < 4;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"_2Star2"}
                              data-plasmic-override={overrides._2Star2}
                              className={classNames(
                                projectcss.all,
                                sty._2Star2
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2LL6
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qTuuk
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "المستكشف"
                                          : "New Explorer";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__beQRu
                                  )}
                                />
                              </div>
                              <section
                                className={classNames(
                                  projectcss.all,
                                  sty.section__rM4Xo
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__nb4Aj)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/profile/images/_15128Jpg6.jpg",
                                    fullWidth: 1230,
                                    fullHeight: 148,
                                    aspectRatio: undefined
                                  }}
                                />
                              </section>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product > 0 && product < 4;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___0Eevu)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1735123919761Jpg.jpg",
                                fullWidth: 1911,
                                fullHeight: 955,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange =
                              product >= 4 && product < 15;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"adventurousBeginnings"}
                          data-plasmic-override={
                            overrides.adventurousBeginnings
                          }
                          className={classNames(
                            projectcss.all,
                            sty.adventurousBeginnings
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 4 && product < 15;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"_2Star"}
                              data-plasmic-override={overrides._2Star}
                              className={classNames(projectcss.all, sty._2Star)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hduNx
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__m5JdH
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "المغامر"
                                          : "Adventurous Beginnings";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__wdwFi
                                  )}
                                />
                              </div>
                              <section
                                className={classNames(
                                  projectcss.all,
                                  sty.section__gg5Jt
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__o8EF8)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/profile/images/_15128Jpg4.jpg",
                                    fullWidth: 1229,
                                    fullHeight: 148,
                                    aspectRatio: undefined
                                  }}
                                />
                              </section>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 4 && product < 15;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__bspQr)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1734782643234Jpg2.jpg",
                                fullWidth: 1922,
                                fullHeight: 961,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange =
                              product >= 15 && product < 35;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"frequentVoyager"}
                          data-plasmic-override={overrides.frequentVoyager}
                          className={classNames(
                            projectcss.all,
                            sty.frequentVoyager
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 15 && product < 35;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"_3Star"}
                              data-plasmic-override={overrides._3Star}
                              className={classNames(projectcss.all, sty._3Star)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__l4ZP3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0PrHo
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "الرحّال"
                                          : "Frequent Voyager";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__hS9UT
                                  )}
                                />
                              </div>
                              <section
                                className={classNames(
                                  projectcss.all,
                                  sty.section__pvO06
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__of8H9)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/profile/images/_15128Jpg3.jpg",
                                    fullWidth: 1230,
                                    fullHeight: 148,
                                    aspectRatio: undefined
                                  }}
                                />
                              </section>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 15 && product < 35;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__p5Ms)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1734782550827Jpg2.jpg",
                                fullWidth: 1922,
                                fullHeight: 961,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange =
                              product >= 35 && product < 150;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"worldExplorer"}
                          data-plasmic-override={overrides.worldExplorer}
                          className={classNames(
                            projectcss.all,
                            sty.worldExplorer
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 35 && product < 150;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"_4Star"}
                              data-plasmic-override={overrides._4Star}
                              className={classNames(projectcss.all, sty._4Star)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9BLnN
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oSh5T
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "المحترف"
                                          : "World Explorer";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__hrTqF
                                  )}
                                />
                              </div>
                              <section
                                data-plasmic-name={"_4SImage"}
                                data-plasmic-override={overrides._4SImage}
                                className={classNames(
                                  projectcss.all,
                                  sty._4SImage
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__fnWtH)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/profile/images/_15128Jpg2.jpg",
                                    fullWidth: 1230,
                                    fullHeight: 148,
                                    aspectRatio: undefined
                                  }}
                                />
                              </section>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 35 && product < 150;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__aw7D9)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1734970995406Jpg.jpg",
                                fullWidth: 1911,
                                fullHeight: 955,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange = product >= 150;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"travelMaster"}
                          data-plasmic-override={overrides.travelMaster}
                          className={classNames(
                            projectcss.all,
                            sty.travelMaster
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange = product >= 150;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"_5Star"}
                              data-plasmic-override={overrides._5Star}
                              className={classNames(projectcss.all, sty._5Star)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fdsjX
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__feaVy
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "الخبير"
                                          : "Travel Master";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__cWnb
                                  )}
                                />
                              </div>
                              <section
                                data-plasmic-name={"starImage"}
                                data-plasmic-override={overrides.starImage}
                                className={classNames(
                                  projectcss.all,
                                  sty.starImage
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__ddqP)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/profile/images/_15128Jpg.jpg",
                                    fullWidth: 1230,
                                    fullHeight: 148,
                                    aspectRatio: undefined
                                  }}
                                />
                              </section>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange = product >= 150;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__qwgTd)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/img10732Jpg2.jpg",
                                fullWidth: 1911,
                                fullHeight: 955,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                        </section>
                      ) : null}
                      <div
                        data-plasmic-name={"time"}
                        data-plasmic-override={overrides.time}
                        className={classNames(projectcss.all, sty.time)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dwOac
                          )}
                          unicode-bidi={"isolate"}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "ساعات\u00A0"
                                  : "Hours\u00A0";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vy3E9
                          )}
                          unicode-bidi={"isolate"}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "الطيران"
                                  : "Spent\u00A0";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6MxIa
                          )}
                          unicode-bidi={"isolate"}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar" ? "" : "Flying";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b147
                          )}
                        >
                          <TimeSvgrepoComSvgIcon
                            data-plasmic-name={"flightIcon8"}
                            data-plasmic-override={overrides.flightIcon8}
                            className={classNames(
                              projectcss.all,
                              sty.flightIcon8
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fg0Zv
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const minutes =
                                    $ctx.fetchedData.result.duration;
                                  const hours = String(
                                    Math.floor(minutes / 60)
                                  ).padStart(2, "0");
                                  const remainingMinutes = String(
                                    minutes % 60
                                  ).padStart(2, "0");
                                  const formattedTime = `${
                                    hours > 0 ? hours : "00"
                                  }:${remainingMinutes}`;
                                  return formattedTime;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"flights"}
                        data-plasmic-override={overrides.flights}
                        className={classNames(projectcss.all, sty.flights)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a2ThP
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "عدد\u00A0"
                                  : "Flights\u00A0";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zKhFs
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "الرحلات"
                                  : "";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uHwl
                          )}
                        >
                          <AirplanePlaneFlightSvgrepoComSvgIcon
                            data-plasmic-name={"flightIcon2"}
                            data-plasmic-override={overrides.flightIcon2}
                            className={classNames(
                              projectcss.all,
                              sty.flightIcon2
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ubsKv
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.result.flights;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"cities"}
                        data-plasmic-override={overrides.cities}
                        className={classNames(projectcss.all, sty.cities)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iCWiq
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "المدن\u00A0"
                                  : "Cities\u00A0";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sI2PN
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "التي\u00A0"
                                  : "Visited\u00A0";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lk4Ff
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar" ? "زرتها" : "";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8J5MZ
                          )}
                        >
                          <CityHallSvgrepoComSvgIcon
                            data-plasmic-name={"cityIcon2"}
                            data-plasmic-override={overrides.cityIcon2}
                            className={classNames(
                              projectcss.all,
                              sty.cityIcon2
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wMr8R
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.result.cities;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"airports4"}
                        data-plasmic-override={overrides.airports4}
                        className={classNames(projectcss.all, sty.airports4)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iCz8F
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "المطارات\u00A0"
                                  : "Airports\u00A0";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___27UrV
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "التي\u00A0"
                                  : "Visited";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qc2Vu
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar" ? "زرتها" : "";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hHWek
                          )}
                        >
                          <DepartureAirportSvgrepoComSvgIcon
                            data-plasmic-name={"cityIcon5"}
                            data-plasmic-override={overrides.cityIcon5}
                            className={classNames(
                              projectcss.all,
                              sty.cityIcon5
                            )}
                            role={"img"}
                          />
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qsiNj
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.result.airports;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </section>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4QYa2
                      )}
                    >
                      <PlasmicLink__
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        component={Link}
                        id={"share-button"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (async () => {
                                      async function shareAppView() {
                                        try {
                                          if (
                                            typeof window.html2canvas ===
                                            "undefined"
                                          ) {
                                            await new Promise(
                                              (resolve, reject) => {
                                                const script =
                                                  document.createElement(
                                                    "script"
                                                  );
                                                script.src =
                                                  "https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js";
                                                script.onload = resolve;
                                                script.onerror = reject;
                                                document.head.appendChild(
                                                  script
                                                );
                                              }
                                            );
                                          }
                                          const fontLink =
                                            document.createElement("link");
                                          fontLink.href =
                                            "https://fonts.googleapis.com/css2?family=Vazirmatn:wght@400;700&display=swap";
                                          fontLink.rel = "stylesheet";
                                          document.head.appendChild(fontLink);
                                          await new Promise(
                                            (resolve, reject) => {
                                              fontLink.onload = resolve;
                                              fontLink.onerror = reject;
                                            }
                                          );
                                          document.body.style.fontFamily =
                                            "Vazirmatn, sans-serif";
                                          const appElement =
                                            document.querySelector("#app-box");
                                          if (!appElement)
                                            throw new Error(
                                              'Element with ID "app-box" not found.'
                                            );
                                          if (
                                            appElement.innerText.match(
                                              /[\u0600-\u06FF]/
                                            )
                                          )
                                            appElement.style.direction = "rtl";
                                          await new Promise(resolve =>
                                            setTimeout(resolve, 500)
                                          );
                                          const canvas =
                                            await window.html2canvas(
                                              appElement,
                                              {
                                                useCORS: true,
                                                logging: true
                                              }
                                            );
                                          const blob = await new Promise(
                                            resolve =>
                                              canvas.toBlob(
                                                resolve,
                                                "image/png"
                                              )
                                          );
                                          if (!blob)
                                            throw new Error(
                                              "Failed to create blob from canvas."
                                            );
                                          const file = new File(
                                            [blob],
                                            "app-screenshot.png",
                                            { type: "image/png" }
                                          );
                                          const canShareFiles =
                                            navigator.canShare &&
                                            navigator.canShare({
                                              files: [file]
                                            });
                                          if (
                                            navigator.share &&
                                            canShareFiles
                                          ) {
                                            try {
                                              await navigator.share({
                                                files: [file]
                                              });
                                              console.log(
                                                "Screenshot shared successfully!"
                                              );
                                              return;
                                            } catch (shareError) {
                                              console.warn(
                                                "Sharing via navigator.share failed, falling back to ImgBB upload.",
                                                shareError
                                              );
                                            }
                                          }
                                          const formData = new FormData();
                                          formData.append(
                                            "key",
                                            "c4c4db147224f29c019f0c0dc3e6f9a0"
                                          );
                                          formData.append("image", file);
                                          const response = await fetch(
                                            "https://api.imgbb.com/1/upload",
                                            {
                                              method: "POST",
                                              body: formData
                                            }
                                          );
                                          if (!response.ok)
                                            throw new Error(
                                              "Failed to upload image to ImgBB."
                                            );
                                          const result = await response.json();
                                          const imgUrl = result.data.url;
                                          await navigator.clipboard.writeText(
                                            imgUrl
                                          );
                                          alert(
                                            `https://wa.me/?text=شاهد هذه الصورة: ${imgUrl}`
                                          );
                                          console.log(
                                            "Image URL copied to clipboard."
                                          );
                                        } catch (error) {
                                          console.error(
                                            "Error capturing or sharing the screenshot:",
                                            error
                                          );
                                          alert(
                                            "Failed to share the screenshot. Please try again."
                                          );
                                        } finally {
                                          console.log("done");
                                        }
                                      }
                                      return shareAppView();
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gh9Zg
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "مشاركة"
                                  : "Share";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </PlasmicLink__>
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileHeader",
    "body",
    "httpRestApiFetcher",
    "all2",
    "_2025",
    "_2026",
    "_20234",
    "_2027",
    "loadimg",
    "time3",
    "timeIcon",
    "flights3",
    "flightIcon4",
    "cities3",
    "cityIcon4",
    "airports3",
    "airportIcon5",
    "newLogin",
    "time2",
    "flightIcon6",
    "flights2",
    "flightIcon3",
    "cities2",
    "cityIcon3",
    "airports2",
    "airportIcon4",
    "year2",
    "all",
    "_2024",
    "_2023",
    "_20233",
    "_2022",
    "dreamerr",
    "_0Star",
    "newExplorer",
    "_2Star2",
    "adventurousBeginnings",
    "_2Star",
    "frequentVoyager",
    "_3Star",
    "worldExplorer",
    "_4Star",
    "_4SImage",
    "travelMaster",
    "_5Star",
    "starImage",
    "time",
    "flightIcon8",
    "flights",
    "flightIcon2",
    "cities",
    "cityIcon2",
    "airports4",
    "cityIcon5",
    "link"
  ],
  profileHeader: ["profileHeader"],
  body: [
    "body",
    "httpRestApiFetcher",
    "all2",
    "_2025",
    "_2026",
    "_20234",
    "_2027",
    "loadimg",
    "time3",
    "timeIcon",
    "flights3",
    "flightIcon4",
    "cities3",
    "cityIcon4",
    "airports3",
    "airportIcon5",
    "newLogin",
    "time2",
    "flightIcon6",
    "flights2",
    "flightIcon3",
    "cities2",
    "cityIcon3",
    "airports2",
    "airportIcon4",
    "year2",
    "all",
    "_2024",
    "_2023",
    "_20233",
    "_2022",
    "dreamerr",
    "_0Star",
    "newExplorer",
    "_2Star2",
    "adventurousBeginnings",
    "_2Star",
    "frequentVoyager",
    "_3Star",
    "worldExplorer",
    "_4Star",
    "_4SImage",
    "travelMaster",
    "_5Star",
    "starImage",
    "time",
    "flightIcon8",
    "flights",
    "flightIcon2",
    "cities",
    "cityIcon2",
    "airports4",
    "cityIcon5",
    "link"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "all2",
    "_2025",
    "_2026",
    "_20234",
    "_2027",
    "loadimg",
    "time3",
    "timeIcon",
    "flights3",
    "flightIcon4",
    "cities3",
    "cityIcon4",
    "airports3",
    "airportIcon5",
    "newLogin",
    "time2",
    "flightIcon6",
    "flights2",
    "flightIcon3",
    "cities2",
    "cityIcon3",
    "airports2",
    "airportIcon4",
    "year2",
    "all",
    "_2024",
    "_2023",
    "_20233",
    "_2022",
    "dreamerr",
    "_0Star",
    "newExplorer",
    "_2Star2",
    "adventurousBeginnings",
    "_2Star",
    "frequentVoyager",
    "_3Star",
    "worldExplorer",
    "_4Star",
    "_4SImage",
    "travelMaster",
    "_5Star",
    "starImage",
    "time",
    "flightIcon8",
    "flights",
    "flightIcon2",
    "cities",
    "cityIcon2",
    "airports4",
    "cityIcon5",
    "link"
  ],
  all2: ["all2"],
  _2025: ["_2025"],
  _2026: ["_2026", "_20234"],
  _20234: ["_20234"],
  _2027: ["_2027"],
  loadimg: ["loadimg"],
  time3: ["time3", "timeIcon"],
  timeIcon: ["timeIcon"],
  flights3: ["flights3", "flightIcon4"],
  flightIcon4: ["flightIcon4"],
  cities3: ["cities3", "cityIcon4"],
  cityIcon4: ["cityIcon4"],
  airports3: ["airports3", "airportIcon5"],
  airportIcon5: ["airportIcon5"],
  newLogin: ["newLogin"],
  time2: ["time2", "flightIcon6"],
  flightIcon6: ["flightIcon6"],
  flights2: ["flights2", "flightIcon3"],
  flightIcon3: ["flightIcon3"],
  cities2: ["cities2", "cityIcon3"],
  cityIcon3: ["cityIcon3"],
  airports2: ["airports2", "airportIcon4"],
  airportIcon4: ["airportIcon4"],
  year2: ["year2", "all", "_2024", "_2023", "_20233", "_2022"],
  all: ["all"],
  _2024: ["_2024"],
  _2023: ["_2023", "_20233"],
  _20233: ["_20233"],
  _2022: ["_2022"],
  dreamerr: ["dreamerr", "_0Star"],
  _0Star: ["_0Star"],
  newExplorer: ["newExplorer", "_2Star2"],
  _2Star2: ["_2Star2"],
  adventurousBeginnings: ["adventurousBeginnings", "_2Star"],
  _2Star: ["_2Star"],
  frequentVoyager: ["frequentVoyager", "_3Star"],
  _3Star: ["_3Star"],
  worldExplorer: ["worldExplorer", "_4Star", "_4SImage"],
  _4Star: ["_4Star", "_4SImage"],
  _4SImage: ["_4SImage"],
  travelMaster: ["travelMaster", "_5Star", "starImage"],
  _5Star: ["_5Star", "starImage"],
  starImage: ["starImage"],
  time: ["time", "flightIcon8"],
  flightIcon8: ["flightIcon8"],
  flights: ["flights", "flightIcon2"],
  flightIcon2: ["flightIcon2"],
  cities: ["cities", "cityIcon2"],
  cityIcon2: ["cityIcon2"],
  airports4: ["airports4", "cityIcon5"],
  cityIcon5: ["cityIcon5"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profileHeader: typeof ProfileHeader;
  body: "div";
  httpRestApiFetcher: typeof DataFetcher;
  all2: typeof Button;
  _2025: typeof Button;
  _2026: typeof Button;
  _20234: "div";
  _2027: typeof Button;
  loadimg: "section";
  time3: "div";
  timeIcon: "svg";
  flights3: "div";
  flightIcon4: "svg";
  cities3: "div";
  cityIcon4: "svg";
  airports3: "div";
  airportIcon5: "svg";
  newLogin: typeof NewLogin;
  time2: "div";
  flightIcon6: "svg";
  flights2: "div";
  flightIcon3: "svg";
  cities2: "div";
  cityIcon3: "svg";
  airports2: "div";
  airportIcon4: "svg";
  year2: "div";
  all: typeof Button;
  _2024: typeof Button;
  _2023: typeof Button;
  _20233: "div";
  _2022: typeof Button;
  dreamerr: "section";
  _0Star: "div";
  newExplorer: "section";
  _2Star2: "div";
  adventurousBeginnings: "section";
  _2Star: "div";
  frequentVoyager: "section";
  _3Star: "div";
  worldExplorer: "section";
  _4Star: "div";
  _4SImage: "section";
  travelMaster: "section";
  _5Star: "div";
  starImage: "section";
  time: "div";
  flightIcon8: "svg";
  flights: "div";
  flightIcon2: "svg";
  cities: "div";
  cityIcon2: "svg";
  airports4: "div";
  cityIcon5: "svg";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileHeader: makeNodeComponent("profileHeader"),
    body: makeNodeComponent("body"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    all2: makeNodeComponent("all2"),
    _2025: makeNodeComponent("_2025"),
    _2026: makeNodeComponent("_2026"),
    _20234: makeNodeComponent("_20234"),
    _2027: makeNodeComponent("_2027"),
    loadimg: makeNodeComponent("loadimg"),
    time3: makeNodeComponent("time3"),
    timeIcon: makeNodeComponent("timeIcon"),
    flights3: makeNodeComponent("flights3"),
    flightIcon4: makeNodeComponent("flightIcon4"),
    cities3: makeNodeComponent("cities3"),
    cityIcon4: makeNodeComponent("cityIcon4"),
    airports3: makeNodeComponent("airports3"),
    airportIcon5: makeNodeComponent("airportIcon5"),
    newLogin: makeNodeComponent("newLogin"),
    time2: makeNodeComponent("time2"),
    flightIcon6: makeNodeComponent("flightIcon6"),
    flights2: makeNodeComponent("flights2"),
    flightIcon3: makeNodeComponent("flightIcon3"),
    cities2: makeNodeComponent("cities2"),
    cityIcon3: makeNodeComponent("cityIcon3"),
    airports2: makeNodeComponent("airports2"),
    airportIcon4: makeNodeComponent("airportIcon4"),
    year2: makeNodeComponent("year2"),
    all: makeNodeComponent("all"),
    _2024: makeNodeComponent("_2024"),
    _2023: makeNodeComponent("_2023"),
    _20233: makeNodeComponent("_20233"),
    _2022: makeNodeComponent("_2022"),
    dreamerr: makeNodeComponent("dreamerr"),
    _0Star: makeNodeComponent("_0Star"),
    newExplorer: makeNodeComponent("newExplorer"),
    _2Star2: makeNodeComponent("_2Star2"),
    adventurousBeginnings: makeNodeComponent("adventurousBeginnings"),
    _2Star: makeNodeComponent("_2Star"),
    frequentVoyager: makeNodeComponent("frequentVoyager"),
    _3Star: makeNodeComponent("_3Star"),
    worldExplorer: makeNodeComponent("worldExplorer"),
    _4Star: makeNodeComponent("_4Star"),
    _4SImage: makeNodeComponent("_4SImage"),
    travelMaster: makeNodeComponent("travelMaster"),
    _5Star: makeNodeComponent("_5Star"),
    starImage: makeNodeComponent("starImage"),
    time: makeNodeComponent("time"),
    flightIcon8: makeNodeComponent("flightIcon8"),
    flights: makeNodeComponent("flights"),
    flightIcon2: makeNodeComponent("flightIcon2"),
    cities: makeNodeComponent("cities"),
    cityIcon2: makeNodeComponent("cityIcon2"),
    airports4: makeNodeComponent("airports4"),
    cityIcon5: makeNodeComponent("cityIcon5"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Trip-Stats",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
