// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: SEZ-EKiSKUiS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileHeader from "../../ProfileHeader"; // plasmic-import: T35z79qnz4CS/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Login from "../../Login"; // plasmic-import: 6aGTi8PwQvO7/component
import Error from "../../Error"; // plasmic-import: meZq6_ZZzlPV/component

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "../library/PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: SEZ-EKiSKUiS/css

import AirplanePlaneFlightSvgrepoComSvgIcon from "./icons/PlasmicIcon__AirplanePlaneFlightSvgrepoComSvg"; // plasmic-import: Pd4zaT4q7XG6/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: r0tRVp3Pkl1R/icon
import WatchThinSvgrepoComSvgIcon from "./icons/PlasmicIcon__WatchThinSvgrepoComSvg"; // plasmic-import: __jn_kdFDPwW/icon
import BadshahiMosqueSvgrepoComSvgIcon from "./icons/PlasmicIcon__BadshahiMosqueSvgrepoComSvg"; // plasmic-import: T89ROJGhrPRj/icon
import AirportSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__AirportSvgrepoCom2Svg"; // plasmic-import: -ZavcDLOxXRR/icon
import EarthGlobeInternetSvgrepoComSvgIcon from "./icons/PlasmicIcon__EarthGlobeInternetSvgrepoComSvg"; // plasmic-import: tnwTMdzph0Bo/icon
import EarthGlobeGlobalSvgrepoComSvgIcon from "./icons/PlasmicIcon__EarthGlobeGlobalSvgrepoComSvg"; // plasmic-import: AEoFua48XFYN/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  profileHeader?: Flex__<typeof ProfileHeader>;
  body?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  img?: Flex__<typeof PlasmicImg__>;
  error?: Flex__<typeof Error>;
  flight?: Flex__<"div">;
  flightIcon?: Flex__<"svg">;
  hours?: Flex__<"div">;
  svg?: Flex__<"svg">;
  city?: Flex__<"div">;
  cityIcon?: Flex__<"svg">;
  airport2?: Flex__<"div">;
  airportIcon2?: Flex__<"svg">;
  km?: Flex__<"div">;
  kmIcon?: Flex__<"svg">;
  milesFlown?: Flex__<"div">;
  country?: Flex__<"div">;
  countryIcon?: Flex__<"svg">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authToken",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.decodeURIComponent(
                ("; " + `${window.document.cookie}`)
                  .split("; auth_token=")
                  .pop()
                  .split(";")
                  .shift()
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return ``;
              }
              throw e;
            }
          })()
      },
      {
        path: "language",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return '""';
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <ProfileHeader
            data-plasmic-name={"profileHeader"}
            data-plasmic-override={overrides.profileHeader}
            className={classNames("__wab_instance", sty.profileHeader)}
          />

          {(() => {
            try {
              return window.decodeURIComponent(
                ("; " + `${window.document.cookie}`)
                  .split("; auth_token=")
                  .pop()
                  .split(";")
                  .shift()
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"body"}
              data-plasmic-override={overrides.body}
              className={classNames(projectcss.all, sty.body)}
              dir={(() => {
                try {
                  return $state.language === "ar" ? "rtl" : "ltr";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {(() => {
                try {
                  return $state.authToken;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <DataFetcher
                  data-plasmic-name={"httpRestApiFetcher"}
                  data-plasmic-override={overrides.httpRestApiFetcher}
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher
                  )}
                  dataName={"fetchedData"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchError.status === 401;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Login
                              className={classNames(
                                "__wab_instance",
                                sty.login__gIQof
                              )}
                              language={$state.language}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $ctx.fetchError.status === 401 &&
                                $state.authToken !== ""
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Error
                              data-plasmic-name={"error"}
                              data-plasmic-override={overrides.error}
                              className={classNames(
                                "__wab_instance",
                                sty.error
                              )}
                            />
                          ) : null}
                        </React.Fragment>
                      )}
                    </DataCtxReader__>
                  }
                  errorName={"fetchError"}
                  headers={(() => {
                    try {
                      return {
                        "Content-Type": "application/json",
                        Accept: "application/json",
                        Authorization: $state.authToken,
                        language: $state.language
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          "Content-Type": "application/json",
                          Accept: "application/json"
                        };
                      }
                      throw e;
                    }
                  })()}
                  loadingDisplay={
                    <DataCtxReader__>
                      {$ctx => (
                        <section
                          className={classNames(
                            projectcss.all,
                            sty.section__fQPuI
                          )}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant(
                                globalVariants,
                                "screen",
                                "desktopDefault"
                              )
                                ? "100%"
                                : "auto"
                            }
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/profile/images/_66E6Ee5D867195738847F3FdAaf7Fa12261301160E09C18600DfGif.gif",
                              fullWidth: 340,
                              fullHeight: 336,
                              aspectRatio: undefined
                            }}
                          />
                        </section>
                      )}
                    </DataCtxReader__>
                  }
                  method={"GET"}
                  noLayout={false}
                  previewErrorDisplay={
                    hasVariant(globalVariants, "screen", "desktopDefault")
                      ? false
                      : false
                  }
                  previewSpinner={false}
                  url={"https://flight.sindibad.tech/api/v1/Order/mytrips-stat"}
                >
                  <DataCtxReader__>
                    {$ctx =>
                      (() => {
                        try {
                          return $state.authToken;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1ZL
                          )}
                        >
                          {(() => {
                            try {
                              return $state.authToken;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__caBqh
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"flight"}
                                data-plasmic-override={overrides.flight}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.flight
                                )}
                              >
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__shzgu
                                  )}
                                >
                                  <AirplanePlaneFlightSvgrepoComSvgIcon
                                    data-plasmic-name={"flightIcon"}
                                    data-plasmic-override={overrides.flightIcon}
                                    className={classNames(
                                      projectcss.all,
                                      sty.flightIcon
                                    )}
                                    role={"img"}
                                  />
                                </section>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___17Ntc
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.fetchedData.result.flights;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qmsYg
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "desktopDefault"
                                  ) ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.language === "ar"
                                            ? "عدد الرحلات"
                                            : "Flights";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Hours in the Air";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.language === "ar"
                                            ? "عدد الرحلات"
                                            : "Flights";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Hours in the Air";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"hours"}
                                data-plasmic-override={overrides.hours}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.hours
                                )}
                              >
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__lea6F
                                  )}
                                >
                                  <PlasmicIcon__
                                    data-plasmic-name={"svg"}
                                    data-plasmic-override={overrides.svg}
                                    PlasmicIconType={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "desktopDefault"
                                      )
                                        ? WatchThinSvgrepoComSvgIcon
                                        : Icon2Icon
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg
                                    )}
                                    role={"img"}
                                  />
                                </section>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__f9Qed
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileSmall"
                                  ) ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            const minutes =
                                              $ctx.fetchedData.result.duration;
                                            const hours = Math.floor(
                                              minutes / 60
                                            );
                                            const remainingMinutes = String(
                                              minutes % 60
                                            ).padStart(2, "0");
                                            return `${hours}:${remainingMinutes}`;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            const minutes =
                                              $ctx.fetchedData.result.duration;
                                            const hours = Math.floor(
                                              minutes / 60
                                            );
                                            const remainingMinutes = String(
                                              minutes % 60
                                            ).padStart(2, "0");
                                            return `${hours}:${remainingMinutes}`;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oI9H8
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileSmall"
                                  ) ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.language === "ar"
                                            ? "ساعات التحليق"
                                            : "Hours in the air";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Hours in the Air";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.language === "ar"
                                            ? "ساعات التحليق"
                                            : "Hours in the Air";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Hours in the Air";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"city"}
                                data-plasmic-override={overrides.city}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.city)}
                              >
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__mPYa
                                  )}
                                >
                                  <PlasmicIcon__
                                    data-plasmic-name={"cityIcon"}
                                    data-plasmic-override={overrides.cityIcon}
                                    PlasmicIconType={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "desktopDefault"
                                      )
                                        ? BadshahiMosqueSvgrepoComSvgIcon
                                        : BadshahiMosqueSvgrepoComSvgIcon
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.cityIcon
                                    )}
                                    role={"img"}
                                  />
                                </section>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dhf2M
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.fetchedData.result.cities;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__aJz8N
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "المدن التي زرتها"
                                          : "Cities Visited";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Cities";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"airport2"}
                                data-plasmic-override={overrides.airport2}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.airport2
                                )}
                              >
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__jEdHu
                                  )}
                                >
                                  <PlasmicIcon__
                                    data-plasmic-name={"airportIcon2"}
                                    data-plasmic-override={
                                      overrides.airportIcon2
                                    }
                                    PlasmicIconType={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "desktopDefault"
                                      )
                                        ? AirportSvgrepoCom2SvgIcon
                                        : AirportSvgrepoCom2SvgIcon
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.airportIcon2
                                    )}
                                    role={"img"}
                                  />
                                </section>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jBlXk
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.fetchedData.result.airports;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__neK0L
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.language === "ar"
                                          ? "المطارات التي زرتها "
                                          : "Airports Visited";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Airport Visited";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"km"}
                                data-plasmic-override={overrides.km}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.km)}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rb0AG
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__d8Ieh
                                    )}
                                  >
                                    <EarthGlobeInternetSvgrepoComSvgIcon
                                      data-plasmic-name={"kmIcon"}
                                      data-plasmic-override={overrides.kmIcon}
                                      className={classNames(
                                        projectcss.all,
                                        sty.kmIcon
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__m3Hif
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData.result
                                            .duration;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    data-plasmic-name={"milesFlown"}
                                    data-plasmic-override={overrides.milesFlown}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.milesFlown
                                    )}
                                  >
                                    {"Miles Flown"}
                                  </div>
                                </div>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"country"}
                                data-plasmic-override={overrides.country}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.country
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tZYxa
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qGMte
                                    )}
                                  >
                                    <EarthGlobeGlobalSvgrepoComSvgIcon
                                      data-plasmic-name={"countryIcon"}
                                      data-plasmic-override={
                                        overrides.countryIcon
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.countryIcon
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8XAg
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___691HQ
                                  )}
                                >
                                  {"Countries\n"}
                                </div>
                              </Stack__>
                            </div>
                          ) : null}
                        </Stack__>
                      ) : null
                    }
                  </DataCtxReader__>
                </DataFetcher>
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return !$state.authToken;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Login
              className={classNames("__wab_instance", sty.login__eMcp)}
              language={$state.language}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileHeader",
    "body",
    "httpRestApiFetcher",
    "img",
    "error",
    "flight",
    "flightIcon",
    "hours",
    "svg",
    "city",
    "cityIcon",
    "airport2",
    "airportIcon2",
    "km",
    "kmIcon",
    "milesFlown",
    "country",
    "countryIcon"
  ],
  profileHeader: ["profileHeader"],
  body: [
    "body",
    "httpRestApiFetcher",
    "img",
    "error",
    "flight",
    "flightIcon",
    "hours",
    "svg",
    "city",
    "cityIcon",
    "airport2",
    "airportIcon2",
    "km",
    "kmIcon",
    "milesFlown",
    "country",
    "countryIcon"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "img",
    "error",
    "flight",
    "flightIcon",
    "hours",
    "svg",
    "city",
    "cityIcon",
    "airport2",
    "airportIcon2",
    "km",
    "kmIcon",
    "milesFlown",
    "country",
    "countryIcon"
  ],
  img: ["img"],
  error: ["error"],
  flight: ["flight", "flightIcon"],
  flightIcon: ["flightIcon"],
  hours: ["hours", "svg"],
  svg: ["svg"],
  city: ["city", "cityIcon"],
  cityIcon: ["cityIcon"],
  airport2: ["airport2", "airportIcon2"],
  airportIcon2: ["airportIcon2"],
  km: ["km", "kmIcon", "milesFlown"],
  kmIcon: ["kmIcon"],
  milesFlown: ["milesFlown"],
  country: ["country", "countryIcon"],
  countryIcon: ["countryIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profileHeader: typeof ProfileHeader;
  body: "div";
  httpRestApiFetcher: typeof DataFetcher;
  img: typeof PlasmicImg__;
  error: typeof Error;
  flight: "div";
  flightIcon: "svg";
  hours: "div";
  svg: "svg";
  city: "div";
  cityIcon: "svg";
  airport2: "div";
  airportIcon2: "svg";
  km: "div";
  kmIcon: "svg";
  milesFlown: "div";
  country: "div";
  countryIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileHeader: makeNodeComponent("profileHeader"),
    body: makeNodeComponent("body"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    img: makeNodeComponent("img"),
    error: makeNodeComponent("error"),
    flight: makeNodeComponent("flight"),
    flightIcon: makeNodeComponent("flightIcon"),
    hours: makeNodeComponent("hours"),
    svg: makeNodeComponent("svg"),
    city: makeNodeComponent("city"),
    cityIcon: makeNodeComponent("cityIcon"),
    airport2: makeNodeComponent("airport2"),
    airportIcon2: makeNodeComponent("airportIcon2"),
    km: makeNodeComponent("km"),
    kmIcon: makeNodeComponent("kmIcon"),
    milesFlown: makeNodeComponent("milesFlown"),
    country: makeNodeComponent("country"),
    countryIcon: makeNodeComponent("countryIcon"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Trip-Stats",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
