// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: SEZ-EKiSKUiS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileHeader from "../../ProfileHeader"; // plasmic-import: T35z79qnz4CS/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "../library/PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: SEZ-EKiSKUiS/css

import AirplanePlaneFlightSvgrepoComSvgIcon from "./icons/PlasmicIcon__AirplanePlaneFlightSvgrepoComSvg"; // plasmic-import: Pd4zaT4q7XG6/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: r0tRVp3Pkl1R/icon
import WatchThinSvgrepoComSvgIcon from "./icons/PlasmicIcon__WatchThinSvgrepoComSvg"; // plasmic-import: __jn_kdFDPwW/icon
import BadshahiMosqueSvgrepoComSvgIcon from "./icons/PlasmicIcon__BadshahiMosqueSvgrepoComSvg"; // plasmic-import: T89ROJGhrPRj/icon
import AirportSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__AirportSvgrepoCom2Svg"; // plasmic-import: -ZavcDLOxXRR/icon
import EarthGlobeInternetSvgrepoComSvgIcon from "./icons/PlasmicIcon__EarthGlobeInternetSvgrepoComSvg"; // plasmic-import: tnwTMdzph0Bo/icon
import EarthGlobeGlobalSvgrepoComSvgIcon from "./icons/PlasmicIcon__EarthGlobeGlobalSvgrepoComSvg"; // plasmic-import: AEoFua48XFYN/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {
  stateShow: "login" | "logout";
};
export type PlasmicHomepage__VariantsArgs = {
  stateShow?: MultiChoiceArg<"login" | "logout">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "stateShow"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  profileHeader?: Flex__<typeof ProfileHeader>;
  body?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  img?: Flex__<typeof PlasmicImg__>;
  flight?: Flex__<"div">;
  flightIcon?: Flex__<"svg">;
  hours?: Flex__<"div">;
  svg?: Flex__<"svg">;
  city?: Flex__<"div">;
  cityIcon?: Flex__<"svg">;
  airport2?: Flex__<"div">;
  airportIcon2?: Flex__<"svg">;
  km?: Flex__<"div">;
  kmIcon?: Flex__<"svg">;
  milesFlown?: Flex__<"div">;
  country?: Flex__<"div">;
  countryIcon?: Flex__<"svg">;
  notLogin?: Flex__<"div">;
  flight2?: Flex__<"div">;
  flightIcon1?: Flex__<"svg">;
  flights2?: Flex__<"div">;
  hours2?: Flex__<"div">;
  hour2?: Flex__<"svg">;
  city2?: Flex__<"div">;
  cityIcon2?: Flex__<"svg">;
  airport3?: Flex__<"div">;
  airportIcon3?: Flex__<"svg">;
  km2?: Flex__<"div">;
  milesFlown2?: Flex__<"div">;
  country2?: Flex__<"div">;
  login?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authToken",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.decodeURIComponent(
                ("; " + `${window.document.cookie}`)
                  .split("; auth_token=")
                  .pop()
                  .split(";")
                  .shift()
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return ``;
              }
              throw e;
            }
          })()
      },
      {
        path: "language",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return '""';
              }
              throw e;
            }
          })()
      },
      {
        path: "stateShow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userstate;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.stateShow
      },
      {
        path: "userstate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.authToken === "" ? "logout" : "login";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootstateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.rootstateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            }
          )}
        >
          <ProfileHeader
            data-plasmic-name={"profileHeader"}
            data-plasmic-override={overrides.profileHeader}
            className={classNames("__wab_instance", sty.profileHeader, {
              [sty.profileHeaderstateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              )
            })}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            hasGap={true}
            className={classNames(projectcss.all, sty.body, {
              [sty.bodystateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              ),
              [sty.bodystateShow_logout]: hasVariant(
                $state,
                "stateShow",
                "logout"
              )
            })}
            dir={(() => {
              try {
                return $state.language === "ar" ? "rtl" : "ltr";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataFetcher
              data-plasmic-name={"httpRestApiFetcher"}
              data-plasmic-override={overrides.httpRestApiFetcher}
              className={classNames("__wab_instance", sty.httpRestApiFetcher)}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sCLqe
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "401-Unauthorized";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Error fetching data";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  )}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={(() => {
                try {
                  return {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    Authorization: $state.authToken,
                    language: $state.language
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      "Content-Type": "application/json",
                      Accept: "application/json"
                    };
                  }
                  throw e;
                }
              })()}
              loadingDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y9KK5
                        )}
                      >
                        {"Loading..."}
                      </div>
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/profile/images/_66E6Ee5D867195738847F3FdAaf7Fa12261301160E09C18600DfGif.gif",
                          fullWidth: 340,
                          fullHeight: 336,
                          aspectRatio: undefined
                        }}
                      />
                    </React.Fragment>
                  )}
                </DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              previewSpinner={false}
              url={
                "https://flight.stage.sindibad.tech/api/v1/Order/mytrips-stat"
              }
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__caBqh)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"flight"}
                      data-plasmic-override={overrides.flight}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.flight)}
                    >
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__shzgu
                        )}
                      >
                        <AirplanePlaneFlightSvgrepoComSvgIcon
                          data-plasmic-name={"flightIcon"}
                          data-plasmic-override={overrides.flightIcon}
                          className={classNames(projectcss.all, sty.flightIcon)}
                          role={"img"}
                        />
                      </section>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___17Ntc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.flights;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qmsYg
                        )}
                      >
                        {hasVariant(
                          globalVariants,
                          "screen",
                          "desktopDefault"
                        ) ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "عدد الرحلات"
                                  : "Flights";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Hours in the Air";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "الساعات التي قضيتها في الطيران"
                                  : "Hours in the air";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Hours in the Air";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"hours"}
                      data-plasmic-override={overrides.hours}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.hours)}
                    >
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__lea6F
                        )}
                      >
                        <PlasmicIcon__
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          PlasmicIconType={
                            hasVariant(
                              globalVariants,
                              "screen",
                              "desktopDefault"
                            )
                              ? WatchThinSvgrepoComSvgIcon
                              : Icon2Icon
                          }
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      </section>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f9Qed
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.duration;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oI9H8
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.language === "ar"
                                ? "الساعات التي قضيتها في الطيران"
                                : "Hours in the air";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Hours in the Air";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"city"}
                      data-plasmic-override={overrides.city}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.city)}
                    >
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__mPYa
                        )}
                      >
                        <PlasmicIcon__
                          data-plasmic-name={"cityIcon"}
                          data-plasmic-override={overrides.cityIcon}
                          PlasmicIconType={
                            hasVariant(
                              globalVariants,
                              "screen",
                              "desktopDefault"
                            )
                              ? BadshahiMosqueSvgrepoComSvgIcon
                              : BadshahiMosqueSvgrepoComSvgIcon
                          }
                          className={classNames(projectcss.all, sty.cityIcon)}
                          role={"img"}
                        />
                      </section>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dhf2M
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.cities;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aJz8N
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.language === "ar"
                                ? "المدن التي زرتها"
                                : "Cities visited";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Cities";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"airport2"}
                      data-plasmic-override={overrides.airport2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.airport2)}
                    >
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__jEdHu
                        )}
                      >
                        <PlasmicIcon__
                          data-plasmic-name={"airportIcon2"}
                          data-plasmic-override={overrides.airportIcon2}
                          PlasmicIconType={
                            hasVariant(
                              globalVariants,
                              "screen",
                              "desktopDefault"
                            )
                              ? AirportSvgrepoCom2SvgIcon
                              : AirportSvgrepoCom2SvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.airportIcon2
                          )}
                          role={"img"}
                        />
                      </section>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jBlXk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.airports;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__neK0L
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.language === "ar"
                                ? "المطارات التي زرتها "
                                : "Airports Visited";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Airport Visited";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"km"}
                      data-plasmic-override={overrides.km}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.km)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rb0AG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__d8Ieh
                          )}
                        >
                          <EarthGlobeInternetSvgrepoComSvgIcon
                            data-plasmic-name={"kmIcon"}
                            data-plasmic-override={overrides.kmIcon}
                            className={classNames(projectcss.all, sty.kmIcon)}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m3Hif
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.result.duration;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          data-plasmic-name={"milesFlown"}
                          data-plasmic-override={overrides.milesFlown}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.milesFlown
                          )}
                        >
                          {"Miles Flown"}
                        </div>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"country"}
                      data-plasmic-override={overrides.country}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.country)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tZYxa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qGMte
                          )}
                        >
                          <EarthGlobeGlobalSvgrepoComSvgIcon
                            data-plasmic-name={"countryIcon"}
                            data-plasmic-override={overrides.countryIcon}
                            className={classNames(
                              projectcss.all,
                              sty.countryIcon
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8XAg
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___691HQ
                        )}
                      >
                        {"Countries\n"}
                      </div>
                    </Stack__>
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"notLogin"}
            data-plasmic-override={overrides.notLogin}
            hasGap={true}
            className={classNames(projectcss.all, sty.notLogin, {
              [sty.notLoginstateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              )
            })}
            dir={(() => {
              try {
                return $state.language === "ar" ? "rtl" : "ltr";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <div className={classNames(projectcss.all, sty.freeBox__aR7Md)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"flight2"}
                data-plasmic-override={overrides.flight2}
                hasGap={true}
                className={classNames(projectcss.all, sty.flight2)}
              >
                <section
                  className={classNames(projectcss.all, sty.section__phe4J)}
                >
                  <AirplanePlaneFlightSvgrepoComSvgIcon
                    data-plasmic-name={"flightIcon1"}
                    data-plasmic-override={overrides.flightIcon1}
                    className={classNames(projectcss.all, sty.flightIcon1)}
                    role={"img"}
                  />
                </section>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vxOsx
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"flights2"}
                  data-plasmic-override={overrides.flights2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.flights2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.language === "ar"
                          ? "عدد الرحلات"
                          : "Flights";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Flights";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"hours2"}
                data-plasmic-override={overrides.hours2}
                hasGap={true}
                className={classNames(projectcss.all, sty.hours2)}
              >
                <section
                  className={classNames(projectcss.all, sty.section__zVzJw)}
                >
                  <WatchThinSvgrepoComSvgIcon
                    data-plasmic-name={"hour2"}
                    data-plasmic-override={overrides.hour2}
                    className={classNames(projectcss.all, sty.hour2)}
                    role={"img"}
                  />
                </section>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nVuCe
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tFSkA
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.language === "ar"
                          ? "الساعات التي قضيتها في الطيران"
                          : "Hours in the air";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Hours in the Air";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"city2"}
                data-plasmic-override={overrides.city2}
                hasGap={true}
                className={classNames(projectcss.all, sty.city2)}
              >
                <section
                  className={classNames(projectcss.all, sty.section___7AaWh)}
                >
                  <BadshahiMosqueSvgrepoComSvgIcon
                    data-plasmic-name={"cityIcon2"}
                    data-plasmic-override={overrides.cityIcon2}
                    className={classNames(projectcss.all, sty.cityIcon2)}
                    role={"img"}
                  />
                </section>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yt6Ju
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bs7Kv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.language === "ar"
                          ? "المدن التي زرتها"
                          : "Cities visited";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Cities";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"airport3"}
                data-plasmic-override={overrides.airport3}
                hasGap={true}
                className={classNames(projectcss.all, sty.airport3)}
              >
                <section
                  className={classNames(projectcss.all, sty.section__qfeKv)}
                >
                  <AirportSvgrepoCom2SvgIcon
                    data-plasmic-name={"airportIcon3"}
                    data-plasmic-override={overrides.airportIcon3}
                    className={classNames(projectcss.all, sty.airportIcon3)}
                    role={"img"}
                  />
                </section>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cgwNm
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oK4
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.language === "ar"
                          ? "المطارات التي زرتها "
                          : "Airports Visited";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Airport Visited";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"km2"}
                data-plasmic-override={overrides.km2}
                hasGap={true}
                className={classNames(projectcss.all, sty.km2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kmfe3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"milesFlown2"}
                  data-plasmic-override={overrides.milesFlown2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.milesFlown2
                  )}
                >
                  {"Miles Flown"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"country2"}
                data-plasmic-override={overrides.country2}
                hasGap={true}
                className={classNames(projectcss.all, sty.country2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uVKee
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "0";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wjBZr
                  )}
                >
                  {"Countries\n"}
                </div>
              </Stack__>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            hasGap={true}
            className={classNames(projectcss.all, sty.login, {
              [sty.loginstateShow_login]: hasVariant(
                $state,
                "stateShow",
                "login"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ri6Ny
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar"
                      ? "للمتابعة في إحصائيات الرحلة، يرجى تسجيل الدخول أولاً."
                      : "To continue on Trip Stats, please login first.";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={"https://sindibad.iq/auth?step=regin"}
              onClick={async event => {
                const $steps = {};

                $steps["login"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function deleteCookie(name, path = "/", domain) {
                              const expires = "Thu, 01 Jan 1970 00:00:00 GMT";
                              const domainAttribute = domain
                                ? `; domain=${domain}`
                                : "";
                              const pathAttribute = `; path=${path}`;
                              document.cookie = `${name}=; expires=${expires}${pathAttribute}${domainAttribute}`;
                            }
                            try {
                              deleteCookie("aut_token", "/", ".sindibad.iq");
                              console.log("deleting auth cookie");
                            } catch {
                              console.log("No auth cookie");
                            }
                            let name = "external_redirect";
                            let value = "https://support.sindibad.iq";
                            let path = "/";
                            const domainAttribute = `; domain=.sindibad.iq`;
                            window.document.cookie = `${name}=${window.encodeURIComponent(
                              value
                            )}; path=${path}${domainAttribute}`;
                            return console.log("External redirect set");
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["login"] != null &&
                  typeof $steps["login"] === "object" &&
                  typeof $steps["login"].then === "function"
                ) {
                  $steps["login"] = await $steps["login"];
                }
              }}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xupLi
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.language === "ar"
                        ? "تسجيل الدخول"
                        : "Login";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "New Request";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </PlasmicLink__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileHeader",
    "body",
    "httpRestApiFetcher",
    "img",
    "flight",
    "flightIcon",
    "hours",
    "svg",
    "city",
    "cityIcon",
    "airport2",
    "airportIcon2",
    "km",
    "kmIcon",
    "milesFlown",
    "country",
    "countryIcon",
    "notLogin",
    "flight2",
    "flightIcon1",
    "flights2",
    "hours2",
    "hour2",
    "city2",
    "cityIcon2",
    "airport3",
    "airportIcon3",
    "km2",
    "milesFlown2",
    "country2",
    "login",
    "link"
  ],
  profileHeader: ["profileHeader"],
  body: [
    "body",
    "httpRestApiFetcher",
    "img",
    "flight",
    "flightIcon",
    "hours",
    "svg",
    "city",
    "cityIcon",
    "airport2",
    "airportIcon2",
    "km",
    "kmIcon",
    "milesFlown",
    "country",
    "countryIcon"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "img",
    "flight",
    "flightIcon",
    "hours",
    "svg",
    "city",
    "cityIcon",
    "airport2",
    "airportIcon2",
    "km",
    "kmIcon",
    "milesFlown",
    "country",
    "countryIcon"
  ],
  img: ["img"],
  flight: ["flight", "flightIcon"],
  flightIcon: ["flightIcon"],
  hours: ["hours", "svg"],
  svg: ["svg"],
  city: ["city", "cityIcon"],
  cityIcon: ["cityIcon"],
  airport2: ["airport2", "airportIcon2"],
  airportIcon2: ["airportIcon2"],
  km: ["km", "kmIcon", "milesFlown"],
  kmIcon: ["kmIcon"],
  milesFlown: ["milesFlown"],
  country: ["country", "countryIcon"],
  countryIcon: ["countryIcon"],
  notLogin: [
    "notLogin",
    "flight2",
    "flightIcon1",
    "flights2",
    "hours2",
    "hour2",
    "city2",
    "cityIcon2",
    "airport3",
    "airportIcon3",
    "km2",
    "milesFlown2",
    "country2"
  ],
  flight2: ["flight2", "flightIcon1", "flights2"],
  flightIcon1: ["flightIcon1"],
  flights2: ["flights2"],
  hours2: ["hours2", "hour2"],
  hour2: ["hour2"],
  city2: ["city2", "cityIcon2"],
  cityIcon2: ["cityIcon2"],
  airport3: ["airport3", "airportIcon3"],
  airportIcon3: ["airportIcon3"],
  km2: ["km2", "milesFlown2"],
  milesFlown2: ["milesFlown2"],
  country2: ["country2"],
  login: ["login", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profileHeader: typeof ProfileHeader;
  body: "div";
  httpRestApiFetcher: typeof DataFetcher;
  img: typeof PlasmicImg__;
  flight: "div";
  flightIcon: "svg";
  hours: "div";
  svg: "svg";
  city: "div";
  cityIcon: "svg";
  airport2: "div";
  airportIcon2: "svg";
  km: "div";
  kmIcon: "svg";
  milesFlown: "div";
  country: "div";
  countryIcon: "svg";
  notLogin: "div";
  flight2: "div";
  flightIcon1: "svg";
  flights2: "div";
  hours2: "div";
  hour2: "svg";
  city2: "div";
  cityIcon2: "svg";
  airport3: "div";
  airportIcon3: "svg";
  km2: "div";
  milesFlown2: "div";
  country2: "div";
  login: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileHeader: makeNodeComponent("profileHeader"),
    body: makeNodeComponent("body"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    img: makeNodeComponent("img"),
    flight: makeNodeComponent("flight"),
    flightIcon: makeNodeComponent("flightIcon"),
    hours: makeNodeComponent("hours"),
    svg: makeNodeComponent("svg"),
    city: makeNodeComponent("city"),
    cityIcon: makeNodeComponent("cityIcon"),
    airport2: makeNodeComponent("airport2"),
    airportIcon2: makeNodeComponent("airportIcon2"),
    km: makeNodeComponent("km"),
    kmIcon: makeNodeComponent("kmIcon"),
    milesFlown: makeNodeComponent("milesFlown"),
    country: makeNodeComponent("country"),
    countryIcon: makeNodeComponent("countryIcon"),
    notLogin: makeNodeComponent("notLogin"),
    flight2: makeNodeComponent("flight2"),
    flightIcon1: makeNodeComponent("flightIcon1"),
    flights2: makeNodeComponent("flights2"),
    hours2: makeNodeComponent("hours2"),
    hour2: makeNodeComponent("hour2"),
    city2: makeNodeComponent("city2"),
    cityIcon2: makeNodeComponent("cityIcon2"),
    airport3: makeNodeComponent("airport3"),
    airportIcon3: makeNodeComponent("airportIcon3"),
    km2: makeNodeComponent("km2"),
    milesFlown2: makeNodeComponent("milesFlown2"),
    country2: makeNodeComponent("country2"),
    login: makeNodeComponent("login"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Trip-Stats",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
