// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: SEZ-EKiSKUiS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileHeader from "../../ProfileHeader"; // plasmic-import: T35z79qnz4CS/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Login from "../../Login"; // plasmic-import: 6aGTi8PwQvO7/component
import Error from "../../Error"; // plasmic-import: meZq6_ZZzlPV/component

import { useScreenVariants as useScreenVariantsj8Mi7ZgQDQt } from "../library/PlasmicGlobalVariant__Screen"; // plasmic-import: J8mi7ZG-qDQt/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: SEZ-EKiSKUiS/css

import AirplanePlaneFlightSvgrepoComSvgIcon from "./icons/PlasmicIcon__AirplanePlaneFlightSvgrepoComSvg"; // plasmic-import: Pd4zaT4q7XG6/icon
import BadshahiMosqueSvgrepoComSvgIcon from "./icons/PlasmicIcon__BadshahiMosqueSvgrepoComSvg"; // plasmic-import: T89ROJGhrPRj/icon
import AirportSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__AirportSvgrepoCom2Svg"; // plasmic-import: -ZavcDLOxXRR/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  profileHeader?: Flex__<typeof ProfileHeader>;
  body?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  error?: Flex__<typeof Error>;
  duration?: Flex__<"section">;
  freeBox?: Flex__<"div">;
  days?: Flex__<"div">;
  hours2?: Flex__<"div">;
  minutes?: Flex__<"div">;
  dreamerr?: Flex__<"section">;
  explorerr?: Flex__<"section">;
  adventurer2?: Flex__<"section">;
  globetrotterr?: Flex__<"section">;
  voyager?: Flex__<"section">;
  flights?: Flex__<"div">;
  flightIcon2?: Flex__<"svg">;
  cities?: Flex__<"div">;
  cityIcon2?: Flex__<"svg">;
  airports?: Flex__<"div">;
  airportIcon3?: Flex__<"svg">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authToken",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.decodeURIComponent(
                ("; " + `${window.document.cookie}`)
                  .split("; auth_token=")
                  .pop()
                  .split(";")
                  .shift()
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return ``;
              }
              throw e;
            }
          })()
      },
      {
        path: "language",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ("; " + `${window.document.cookie}`)
                .split("; user_lang=")
                .pop()
                .split(";")
                .shift()
                ? ("; " + `${window.document.cookie}`)
                    .split("; user_lang=")
                    .pop()
                    .split(";")
                    .shift()
                : "en";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return '""';
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj8Mi7ZgQDQt()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <ProfileHeader
            data-plasmic-name={"profileHeader"}
            data-plasmic-override={overrides.profileHeader}
            className={classNames("__wab_instance", sty.profileHeader)}
          />

          {(() => {
            try {
              return !($state.authToken === "");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"body"}
              data-plasmic-override={overrides.body}
              className={classNames(projectcss.all, sty.body)}
              dir={(() => {
                try {
                  return $state.language === "ar" ? "rtl" : "ltr";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <DataFetcher
                data-plasmic-name={"httpRestApiFetcher"}
                data-plasmic-override={overrides.httpRestApiFetcher}
                className={classNames("__wab_instance", sty.httpRestApiFetcher)}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.fetchError.status === 401;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Login
                            className={classNames(
                              "__wab_instance",
                              sty.login__gIQof
                            )}
                            language={$state.language}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $ctx.fetchError.status === 401 &&
                              $state.authToken !== ""
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Error
                            data-plasmic-name={"error"}
                            data-plasmic-override={overrides.error}
                            className={classNames("__wab_instance", sty.error)}
                          />
                        ) : null}
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={(() => {
                  try {
                    return {
                      "Content-Type": "application/json",
                      Accept: "application/json",
                      Authorization: $state.authToken,
                      language: $state.language
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      };
                    }
                    throw e;
                  }
                })()}
                loadingDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__fQPuI
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__uk1Qu)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(
                              globalVariants,
                              "screen",
                              "desktopDefault"
                            )
                              ? "100%"
                              : "auto"
                          }
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/profile/images/_66E6Ee5D867195738847F3FdAaf7Fa12261301160E09C18600DfGif.gif",
                            fullWidth: 340,
                            fullHeight: 336,
                            aspectRatio: undefined
                          }}
                        />
                      </section>
                    )}
                  </DataCtxReader__>
                }
                method={"GET"}
                noLayout={false}
                previewErrorDisplay={
                  hasVariant(globalVariants, "screen", "desktopDefault")
                    ? false
                    : false
                }
                previewSpinner={false}
                url={
                  "https://api.sindibad.iq/api/v1.0/international-flight/Order/mytrips-stat"
                }
              >
                <DataCtxReader__>
                  {$ctx => (
                    <section
                      className={classNames(projectcss.all, sty.section__wvP09)}
                    >
                      <section
                        data-plasmic-name={"duration"}
                        data-plasmic-override={overrides.duration}
                        className={classNames(projectcss.all, sty.duration)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yHWT
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.language === "ar"
                                  ? "مدة الوقت في الطيران"
                                  : "Time Spent Flying";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Time Spent Flying";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          data-plasmic-name={"freeBox"}
                          data-plasmic-override={overrides.freeBox}
                          className={classNames(projectcss.all, sty.freeBox)}
                        >
                          <div
                            data-plasmic-name={"days"}
                            data-plasmic-override={overrides.days}
                            className={classNames(projectcss.all, sty.days)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9TM
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const minutes =
                                        $ctx.fetchedData.result.duration;
                                      const days = Math.floor(
                                        minutes / (60 * 24)
                                      );
                                      const remainingMinutesAfterDays =
                                        minutes % (60 * 24);
                                      const hours = Math.floor(
                                        remainingMinutesAfterDays / 60
                                      );
                                      const remainingMinutes = String(
                                        remainingMinutesAfterDays % 60
                                      ).padStart(2, "0");
                                      return `${days}`;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eabcc
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $props.language === "ar"
                                      ? "أيام"
                                      : "Days";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"hours2"}
                            data-plasmic-override={overrides.hours2}
                            className={classNames(projectcss.all, sty.hours2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Ko8A
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const minutes =
                                        $ctx.fetchedData.result.duration;
                                      const days = Math.floor(
                                        minutes / (60 * 24)
                                      );
                                      const remainingMinutesAfterDays =
                                        minutes % (60 * 24);
                                      const hours = Math.floor(
                                        remainingMinutesAfterDays / 60
                                      );
                                      const remainingMinutes = String(
                                        remainingMinutesAfterDays % 60
                                      ).padStart(2, "0");
                                      return `${hours}`;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__b6Szg
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $props.language === "ar"
                                      ? "ساعات"
                                      : "Hours";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"minutes"}
                            data-plasmic-override={overrides.minutes}
                            className={classNames(projectcss.all, sty.minutes)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6DbPp
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const minutes =
                                        $ctx.fetchedData.result.duration;
                                      const days = Math.floor(
                                        minutes / (60 * 24)
                                      );
                                      const remainingMinutesAfterDays =
                                        minutes % (60 * 24);
                                      const hours = Math.floor(
                                        remainingMinutesAfterDays / 60
                                      );
                                      const remainingMinutes = String(
                                        remainingMinutesAfterDays % 60
                                      ).padStart(2, "0");
                                      return `${remainingMinutes}`;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8ZdG
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $props.language === "ar"
                                      ? "دقائق"
                                      : "Minutes";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      </section>
                      {(() => {
                        try {
                          return $ctx.fetchedData.result.flights === 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"dreamerr"}
                          data-plasmic-override={overrides.dreamerr}
                          className={classNames(projectcss.all, sty.dreamerr)}
                        >
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.flights === 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__cKff9)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1734782686280Jpg2.jpg",
                                fullWidth: 1922,
                                fullHeight: 961,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $ctx.fetchedData.result.flights === 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jNxrW
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.language === "ar"
                                      ? "لم تسافر بعد. سيقوم سندباد بتحديث إحصائيات رحلاتك مع كل رحلة تكملها."
                                      : "You haven’t traveled yet. Sindibad will refresh your trip stats with every trip you complete.";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange =
                              product > 0 && product < 15;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"explorerr"}
                          data-plasmic-override={overrides.explorerr}
                          className={classNames(projectcss.all, sty.explorerr)}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product > 0 && product < 15;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__bspQr)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1734782643234Jpg2.jpg",
                                fullWidth: 1922,
                                fullHeight: 961,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product > 0 && product < 15;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xWDbr
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.language === "ar"
                                      ? "أنت تجعل كل خطوة مغامرة جديدة مثيرة—لننطلق!"
                                      : "You make every step an exciting new adventure—let’s go!";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange =
                              product >= 15 && product < 35;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"adventurer2"}
                          data-plasmic-override={overrides.adventurer2}
                          className={classNames(
                            projectcss.all,
                            sty.adventurer2
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 15 && product < 35;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__p5Ms)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1734782550827Jpg2.jpg",
                                fullWidth: 1922,
                                fullHeight: 961,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 15 && product < 35;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ruhdt
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.language === "ar"
                                      ? "أنت تكتب فصلًا جديدًا مع كل رحلة تقوم بها!"
                                      : "You write a new chapter with every trip you take!";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                        </section>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const flights = $ctx.fetchedData.result.flights;
                            const cities = $ctx.fetchedData.result.cities;
                            const product = flights * cities;
                            const isProductInRange =
                              product >= 35 && product < 150;
                            return isProductInRange;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <section
                          data-plasmic-name={"globetrotterr"}
                          data-plasmic-override={overrides.globetrotterr}
                          className={classNames(
                            projectcss.all,
                            sty.globetrotterr
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 35 && product < 150;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__aw7D9)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/profile/images/imresizer1734782602572Jpg2.jpg",
                                fullWidth: 1922,
                                fullHeight: 961,
                                aspectRatio: undefined
                              }}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const flights = $ctx.fetchedData.result.flights;
                                const cities = $ctx.fetchedData.result.cities;
                                const product = flights * cities;
                                const isProductInRange =
                                  product >= 35 && product < 150;
                                return isProductInRange;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__p0Qhz
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.language === "ar"
                                      ? "أنت مسافر متمرس، تكتب القصص أثناء استكشافك للعالم!"
                                      : "You’re a seasoned traveler, crafting stories as you explore the world!";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                        </section>
                      ) : null}
                      <section
                        data-plasmic-name={"voyager"}
                        data-plasmic-override={overrides.voyager}
                        className={classNames(projectcss.all, sty.voyager)}
                      >
                        {(() => {
                          try {
                            return (() => {
                              const flights = $ctx.fetchedData.result.flights;
                              const cities = $ctx.fetchedData.result.cities;
                              const product = flights * cities;
                              const isProductInRange = product >= 150;
                              return isProductInRange;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__qwgTd)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/profile/images/img1073Jpg.jpg",
                              fullWidth: 1911,
                              fullHeight: 955,
                              aspectRatio: undefined
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              const flights = $ctx.fetchedData.result.flights;
                              const cities = $ctx.fetchedData.result.cities;
                              const product = flights * cities;
                              const isProductInRange = product >= 150;
                              return isProductInRange;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cdNit
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.language === "ar"
                                    ? "لقد رأيت كل شيء، لكن المغامرة لا تنتهي أبدًا!"
                                    : "You’ve seen it all, but the adventure never ends!";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                      </section>
                      <div
                        data-plasmic-name={"flights"}
                        data-plasmic-override={overrides.flights}
                        className={classNames(projectcss.all, sty.flights)}
                      >
                        <AirplanePlaneFlightSvgrepoComSvgIcon
                          data-plasmic-name={"flightIcon2"}
                          data-plasmic-override={overrides.flightIcon2}
                          className={classNames(
                            projectcss.all,
                            sty.flightIcon2
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a2ThP
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "عدد الرحلات"
                                  : "Flights";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ubsKv
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.result.flights;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"cities"}
                        data-plasmic-override={overrides.cities}
                        className={classNames(projectcss.all, sty.cities)}
                      >
                        <BadshahiMosqueSvgrepoComSvgIcon
                          data-plasmic-name={"cityIcon2"}
                          data-plasmic-override={overrides.cityIcon2}
                          className={classNames(projectcss.all, sty.cityIcon2)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iCWiq
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "المدن التي زرتها"
                                  : "Cities Visited";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wMr8R
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.result.cities;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"airports"}
                        data-plasmic-override={overrides.airports}
                        className={classNames(projectcss.all, sty.airports)}
                      >
                        <AirportSvgrepoCom2SvgIcon
                          data-plasmic-name={"airportIcon3"}
                          data-plasmic-override={overrides.airportIcon3}
                          className={classNames(
                            projectcss.all,
                            sty.airportIcon3
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kxRP
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.language === "ar"
                                  ? "المطارات التي زرتها "
                                  : "Airports Visited";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ie2Du
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.result.airports;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </section>
                  )}
                </DataCtxReader__>
              </DataFetcher>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.authToken === "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Login
              className={classNames("__wab_instance", sty.login__eMcp)}
              language={$state.language}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileHeader",
    "body",
    "httpRestApiFetcher",
    "error",
    "duration",
    "freeBox",
    "days",
    "hours2",
    "minutes",
    "dreamerr",
    "explorerr",
    "adventurer2",
    "globetrotterr",
    "voyager",
    "flights",
    "flightIcon2",
    "cities",
    "cityIcon2",
    "airports",
    "airportIcon3"
  ],
  profileHeader: ["profileHeader"],
  body: [
    "body",
    "httpRestApiFetcher",
    "error",
    "duration",
    "freeBox",
    "days",
    "hours2",
    "minutes",
    "dreamerr",
    "explorerr",
    "adventurer2",
    "globetrotterr",
    "voyager",
    "flights",
    "flightIcon2",
    "cities",
    "cityIcon2",
    "airports",
    "airportIcon3"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "error",
    "duration",
    "freeBox",
    "days",
    "hours2",
    "minutes",
    "dreamerr",
    "explorerr",
    "adventurer2",
    "globetrotterr",
    "voyager",
    "flights",
    "flightIcon2",
    "cities",
    "cityIcon2",
    "airports",
    "airportIcon3"
  ],
  error: ["error"],
  duration: ["duration", "freeBox", "days", "hours2", "minutes"],
  freeBox: ["freeBox", "days", "hours2", "minutes"],
  days: ["days"],
  hours2: ["hours2"],
  minutes: ["minutes"],
  dreamerr: ["dreamerr"],
  explorerr: ["explorerr"],
  adventurer2: ["adventurer2"],
  globetrotterr: ["globetrotterr"],
  voyager: ["voyager"],
  flights: ["flights", "flightIcon2"],
  flightIcon2: ["flightIcon2"],
  cities: ["cities", "cityIcon2"],
  cityIcon2: ["cityIcon2"],
  airports: ["airports", "airportIcon3"],
  airportIcon3: ["airportIcon3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profileHeader: typeof ProfileHeader;
  body: "div";
  httpRestApiFetcher: typeof DataFetcher;
  error: typeof Error;
  duration: "section";
  freeBox: "div";
  days: "div";
  hours2: "div";
  minutes: "div";
  dreamerr: "section";
  explorerr: "section";
  adventurer2: "section";
  globetrotterr: "section";
  voyager: "section";
  flights: "div";
  flightIcon2: "svg";
  cities: "div";
  cityIcon2: "svg";
  airports: "div";
  airportIcon3: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileHeader: makeNodeComponent("profileHeader"),
    body: makeNodeComponent("body"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    error: makeNodeComponent("error"),
    duration: makeNodeComponent("duration"),
    freeBox: makeNodeComponent("freeBox"),
    days: makeNodeComponent("days"),
    hours2: makeNodeComponent("hours2"),
    minutes: makeNodeComponent("minutes"),
    dreamerr: makeNodeComponent("dreamerr"),
    explorerr: makeNodeComponent("explorerr"),
    adventurer2: makeNodeComponent("adventurer2"),
    globetrotterr: makeNodeComponent("globetrotterr"),
    voyager: makeNodeComponent("voyager"),
    flights: makeNodeComponent("flights"),
    flightIcon2: makeNodeComponent("flightIcon2"),
    cities: makeNodeComponent("cities"),
    cityIcon2: makeNodeComponent("cityIcon2"),
    airports: makeNodeComponent("airports"),
    airportIcon3: makeNodeComponent("airportIcon3"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Trip-Stats",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
