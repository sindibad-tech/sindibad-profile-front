// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2nNPeRNQPEP9BPre46c64
// Component: zkLRq_PV6ggA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_css from "../library/plasmic.module.css"; // plasmic-import: p1fHvJbiLdgzRrAS359KQb/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i2nNPeRNQPEP9BPre46c64/projectcss
import sty from "./PlasmicNewLogin.module.css"; // plasmic-import: zkLRq_PV6ggA/css

createPlasmicElementProxy;

export type PlasmicNewLogin__VariantMembers = {};
export type PlasmicNewLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewLogin__VariantsArgs;
export const PlasmicNewLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicNewLogin__ArgsType = {
  languafe?: string;
};
type ArgPropType = keyof PlasmicNewLogin__ArgsType;
export const PlasmicNewLogin__ArgProps = new Array<ArgPropType>("languafe");

export type PlasmicNewLogin__OverridesType = {
  root?: Flex__<"div">;
  notLogin?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  login?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultNewLoginProps {
  languafe?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewLogin__RenderFunc(props: {
  variants: PlasmicNewLogin__VariantsArgs;
  args: PlasmicNewLogin__ArgsType;
  overrides: PlasmicNewLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          languafe: "ar"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    (() => {
      try {
        return true;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_library_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"notLogin"}
          data-plasmic-override={overrides.notLogin}
          hasGap={true}
          className={classNames(projectcss.all, sty.notLogin)}
          dr={(() => {
            try {
              return $props.language === "ar" ? "rtl" : "ltr";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/profile/images/skypePicture20241222T080851147ZPng2.png",
              fullWidth: 1530,
              fullHeight: 1270,
              aspectRatio: undefined
            }}
          />
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"login"}
          data-plasmic-override={overrides.login}
          hasGap={true}
          className={classNames(projectcss.all, sty.login)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__s32Z8
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.language === "ar"
                    ? ".للمتابعة في إحصائيات الرحلة\u060C يرجى تسجيل الدخول أولاً"
                    : "To continue on Trip Stats, please login first.";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={"https://sindibad.iq/auth?step=regin"}
            onClick={async event => {
              const $steps = {};

              $steps["newLogin"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function deleteCookie(name, path = "/", domain) {
                            const expires = "Thu, 01 Jan 1970 00:00:00 GMT";
                            const domainAttribute = domain
                              ? `; domain=${domain}`
                              : "";
                            const pathAttribute = `; path=${path}`;
                            document.cookie = `${name}=; expires=${expires}${pathAttribute}${domainAttribute}`;
                          }
                          try {
                            deleteCookie("aut_token", "/", ".sindibad.iq");
                            console.log("deleting auth cookie");
                          } catch {
                            console.log("No auth cookie");
                          }
                          let name = "external_redirect";
                          let value = "https://profile.sindibad.iq/trip-stats";
                          let path = "/";
                          const domainAttribute = `; domain=.sindibad.iq`;
                          window.document.cookie = `${name}=${window.encodeURIComponent(
                            value
                          )}; path=${path}${domainAttribute}`;
                          return console.log("External redirect set");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["newLogin"] != null &&
                typeof $steps["newLogin"] === "object" &&
                typeof $steps["newLogin"].then === "function"
              ) {
                $steps["newLogin"] = await $steps["newLogin"];
              }
            }}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qr4Mp
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.language === "ar" ? "تسجيل الدخول" : "Login";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "New Request";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </PlasmicLink__>
        </Stack__>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "notLogin", "img", "login", "link"],
  notLogin: ["notLogin", "img"],
  img: ["img"],
  login: ["login", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  notLogin: "div";
  img: typeof PlasmicImg__;
  login: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewLogin__VariantsArgs;
    args?: PlasmicNewLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewLogin__ArgProps,
          internalVariantPropNames: PlasmicNewLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewLogin";
  } else {
    func.displayName = `PlasmicNewLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicNewLogin = Object.assign(
  // Top-level PlasmicNewLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    notLogin: makeNodeComponent("notLogin"),
    img: makeNodeComponent("img"),
    login: makeNodeComponent("login"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicNewLogin
    internalVariantProps: PlasmicNewLogin__VariantProps,
    internalArgProps: PlasmicNewLogin__ArgProps
  }
);

export default PlasmicNewLogin;
/* prettier-ignore-end */
